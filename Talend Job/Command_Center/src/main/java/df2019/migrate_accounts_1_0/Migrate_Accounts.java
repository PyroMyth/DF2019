// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package df2019.migrate_accounts_1_0;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_1
//import java.util.List;

//the import part of tJavaRow_1
//import java.util.List;

//the import part of tJava_2
//import java.util.List;

//the import part of tJava_3
//import java.util.List;

//the import part of tJavaRow_2
//import java.util.List;

//the import part of tJava_4
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: Migrate_Accounts Purpose: Exports Accounts from the source org, transforms the data, and imports into destination org<br>
 * Description: This job exports the Account records from the source org, transforms the data to match the destination org, and then imports the data into the destination org. Any exceptions from the initial upsert to the destination org are handled after the first import and then retried. <br>
 * @author user@talend.com
 * @version 6.1.1.20151214_1327
 * @status 
 */
public class Migrate_Accounts implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (dateString != null) {

				this.setProperty("dateString", dateString.toString());

			}

			if (dateTimeString != null) {

				this.setProperty("dateTimeString", dateTimeString.toString());

			}

			if (destPass != null) {

				this.setProperty("destPass", destPass.toString());

			}

			if (destURL != null) {

				this.setProperty("destURL", destURL.toString());

			}

			if (destUser != null) {

				this.setProperty("destUser", destUser.toString());

			}

			if (doDML != null) {

				this.setProperty("doDML", doDML.toString());

			}

			if (exportRecordsFromDest != null) {

				this.setProperty("exportRecordsFromDest",
						exportRecordsFromDest.toString());

			}

			if (exportRecordsFromSource != null) {

				this.setProperty("exportRecordsFromSource",
						exportRecordsFromSource.toString());

			}

			if (filePath != null) {

				this.setProperty("filePath", filePath.toString());

			}

			if (sourcePass != null) {

				this.setProperty("sourcePass", sourcePass.toString());

			}

			if (sourceURL != null) {

				this.setProperty("sourceURL", sourceURL.toString());

			}

			if (sourceUser != null) {

				this.setProperty("sourceUser", sourceUser.toString());

			}

		}

		public String dateString;

		public String getDateString() {
			return this.dateString;
		}

		public String dateTimeString;

		public String getDateTimeString() {
			return this.dateTimeString;
		}

		public String destPass;

		public String getDestPass() {
			return this.destPass;
		}

		public String destURL;

		public String getDestURL() {
			return this.destURL;
		}

		public String destUser;

		public String getDestUser() {
			return this.destUser;
		}

		public Boolean doDML;

		public Boolean getDoDML() {
			return this.doDML;
		}

		public Boolean exportRecordsFromDest;

		public Boolean getExportRecordsFromDest() {
			return this.exportRecordsFromDest;
		}

		public Boolean exportRecordsFromSource;

		public Boolean getExportRecordsFromSource() {
			return this.exportRecordsFromSource;
		}

		public String filePath;

		public String getFilePath() {
			return this.filePath;
		}

		public String sourcePass;

		public String getSourcePass() {
			return this.sourcePass;
		}

		public String sourceURL;

		public String getSourceURL() {
			return this.sourceURL;
		}

		public String sourceUser;

		public String getSourceUser() {
			return this.sourceUser;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "1.0";
	private final String jobName = "Migrate_Accounts";
	private final String projectName = "DF2019";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Migrate_Accounts.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Migrate_Accounts.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tPrejob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSalesforceConnection_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSalesforceConnection_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tSalesforceConnection_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSalesforceConnection_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSalesforceInput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSalesforceInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSalesforceInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJoin_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJoin_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSalesforceBulkExec_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSalesforceBulkExec_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSalesforceBulkExec_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSalesforceBulkExec_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tSalesforceBulkExec_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSalesforceBulkExec_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_7_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSalesforceBulkExec_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_6_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSalesforceBulkExec_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tHash_row3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tHash_row4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tPrejob_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tSalesforceConnection_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tSalesforceConnection_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tSalesforceInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tSalesforceBulkExec_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tSalesforceBulkExec_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());

				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				/**
				 * [tPrejob_1 begin ] stop
				 */

				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */

				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				tSalesforceConnection_1Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_1 finally ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public void tSalesforceConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tSalesforceConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tSalesforceConnection_1 begin ] start
				 */

				ok_Hash.put("tSalesforceConnection_1", false);
				start_Hash.put("tSalesforceConnection_1",
						System.currentTimeMillis());

				currentComponent = "tSalesforceConnection_1";

				int tos_count_tSalesforceConnection_1 = 0;

				System.setProperty("org.apache.commons.logging.Log",
						"org.apache.commons.logging.impl.NoOpLog");

				final String decryptedPassword_tSalesforceConnection_1 = context.sourcePass;

				org.talend.salesforceBulk.SforceBulkConnection sforceConn_tSalesforceConnection_1 = new org.talend.salesforceBulk.SforceBasicBulkConnection.Builder(
						context.sourceURL, context.sourceUser,
						decryptedPassword_tSalesforceConnection_1, "34.0")
						.needCompression(true).needTraceMessage(false)

						.build();

				globalMap.put("conn_tSalesforceConnection_1",
						sforceConn_tSalesforceConnection_1);

				/**
				 * [tSalesforceConnection_1 begin ] stop
				 */

				/**
				 * [tSalesforceConnection_1 main ] start
				 */

				currentComponent = "tSalesforceConnection_1";

				tos_count_tSalesforceConnection_1++;

				/**
				 * [tSalesforceConnection_1 main ] stop
				 */

				/**
				 * [tSalesforceConnection_1 end ] start
				 */

				currentComponent = "tSalesforceConnection_1";

				ok_Hash.put("tSalesforceConnection_1", true);
				end_Hash.put("tSalesforceConnection_1",
						System.currentTimeMillis());

				/**
				 * [tSalesforceConnection_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tSalesforceConnection_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tSalesforceConnection_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tSalesforceConnection_1 finally ] start
				 */

				currentComponent = "tSalesforceConnection_1";

				/**
				 * [tSalesforceConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tSalesforceConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tSalesforceConnection_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tSalesforceConnection_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tSalesforceConnection_2 begin ] start
				 */

				ok_Hash.put("tSalesforceConnection_2", false);
				start_Hash.put("tSalesforceConnection_2",
						System.currentTimeMillis());

				currentComponent = "tSalesforceConnection_2";

				int tos_count_tSalesforceConnection_2 = 0;

				System.setProperty("org.apache.commons.logging.Log",
						"org.apache.commons.logging.impl.NoOpLog");

				final String decryptedPassword_tSalesforceConnection_2 = context.destPass;

				org.talend.salesforceBulk.SforceBulkConnection sforceConn_tSalesforceConnection_2 = new org.talend.salesforceBulk.SforceBasicBulkConnection.Builder(
						context.destURL, context.destUser,
						decryptedPassword_tSalesforceConnection_2, "34.0")
						.needCompression(true).needTraceMessage(false)

						.build();

				globalMap.put("conn_tSalesforceConnection_2",
						sforceConn_tSalesforceConnection_2);

				/**
				 * [tSalesforceConnection_2 begin ] stop
				 */

				/**
				 * [tSalesforceConnection_2 main ] start
				 */

				currentComponent = "tSalesforceConnection_2";

				tos_count_tSalesforceConnection_2++;

				/**
				 * [tSalesforceConnection_2 main ] stop
				 */

				/**
				 * [tSalesforceConnection_2 end ] start
				 */

				currentComponent = "tSalesforceConnection_2";

				ok_Hash.put("tSalesforceConnection_2", true);
				end_Hash.put("tSalesforceConnection_2",
						System.currentTimeMillis());

				/**
				 * [tSalesforceConnection_2 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tSalesforceConnection_2:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tSalesforceConnection_2 finally ] start
				 */

				currentComponent = "tSalesforceConnection_2";

				/**
				 * [tSalesforceConnection_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tSalesforceConnection_2_SUBPROCESS_STATE", 1);
	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());

				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				System.out.println(jobName
						+ ": Exporting from source organization? "
						+ context.exportRecordsFromSource);

				/**
				 * [tJava_1 begin ] stop
				 */

				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */

				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				if (context.exportRecordsFromSource) {

					tSalesforceInput_1Process(globalMap);
				}

				/**
				 * [tJava_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_DF2019_Migrate_Accounts = new byte[0];
		static byte[] commonByteArray_DF2019_Migrate_Accounts = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String Id;

		public String getId() {
			return this.Id;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String BillingStreet;

		public String getBillingStreet() {
			return this.BillingStreet;
		}

		public String BillingCity;

		public String getBillingCity() {
			return this.BillingCity;
		}

		public String BillingState;

		public String getBillingState() {
			return this.BillingState;
		}

		public String BillingPostalCode;

		public String getBillingPostalCode() {
			return this.BillingPostalCode;
		}

		public String BillingCountry;

		public String getBillingCountry() {
			return this.BillingCountry;
		}

		public String Phone;

		public String getPhone() {
			return this.Phone;
		}

		public String Fax;

		public String getFax() {
			return this.Fax;
		}

		public String AccountNumber;

		public String getAccountNumber() {
			return this.AccountNumber;
		}

		public String Website;

		public String getWebsite() {
			return this.Website;
		}

		public String OwnerId;

		public String getOwnerId() {
			return this.OwnerId;
		}

		public java.util.Date CreatedDate;

		public java.util.Date getCreatedDate() {
			return this.CreatedDate;
		}

		public String CreatedById;

		public String getCreatedById() {
			return this.CreatedById;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.Id == null) ? 0 : this.Id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row1Struct other = (row1Struct) obj;

			if (this.Id == null) {
				if (other.Id != null)
					return false;

			} else if (!this.Id.equals(other.Id))

				return false;

			return true;
		}

		public void copyDataTo(row1Struct other) {

			other.Id = this.Id;
			other.Name = this.Name;
			other.BillingStreet = this.BillingStreet;
			other.BillingCity = this.BillingCity;
			other.BillingState = this.BillingState;
			other.BillingPostalCode = this.BillingPostalCode;
			other.BillingCountry = this.BillingCountry;
			other.Phone = this.Phone;
			other.Fax = this.Fax;
			other.AccountNumber = this.AccountNumber;
			other.Website = this.Website;
			other.OwnerId = this.OwnerId;
			other.CreatedDate = this.CreatedDate;
			other.CreatedById = this.CreatedById;

		}

		public void copyKeysDataTo(row1Struct other) {

			other.Id = this.Id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DF2019_Migrate_Accounts.length) {
					if (length < 1024
							&& commonByteArray_DF2019_Migrate_Accounts.length == 0) {
						commonByteArray_DF2019_Migrate_Accounts = new byte[1024];
					} else {
						commonByteArray_DF2019_Migrate_Accounts = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DF2019_Migrate_Accounts, 0,
						length);
				strReturn = new String(commonByteArray_DF2019_Migrate_Accounts,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DF2019_Migrate_Accounts) {

				try {

					int length = 0;

					this.Id = readString(dis);

					this.Name = readString(dis);

					this.BillingStreet = readString(dis);

					this.BillingCity = readString(dis);

					this.BillingState = readString(dis);

					this.BillingPostalCode = readString(dis);

					this.BillingCountry = readString(dis);

					this.Phone = readString(dis);

					this.Fax = readString(dis);

					this.AccountNumber = readString(dis);

					this.Website = readString(dis);

					this.OwnerId = readString(dis);

					this.CreatedDate = readDate(dis);

					this.CreatedById = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Id, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.BillingStreet, dos);

				// String

				writeString(this.BillingCity, dos);

				// String

				writeString(this.BillingState, dos);

				// String

				writeString(this.BillingPostalCode, dos);

				// String

				writeString(this.BillingCountry, dos);

				// String

				writeString(this.Phone, dos);

				// String

				writeString(this.Fax, dos);

				// String

				writeString(this.AccountNumber, dos);

				// String

				writeString(this.Website, dos);

				// String

				writeString(this.OwnerId, dos);

				// java.util.Date

				writeDate(this.CreatedDate, dos);

				// String

				writeString(this.CreatedById, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Id=" + Id);
			sb.append(",Name=" + Name);
			sb.append(",BillingStreet=" + BillingStreet);
			sb.append(",BillingCity=" + BillingCity);
			sb.append(",BillingState=" + BillingState);
			sb.append(",BillingPostalCode=" + BillingPostalCode);
			sb.append(",BillingCountry=" + BillingCountry);
			sb.append(",Phone=" + Phone);
			sb.append(",Fax=" + Fax);
			sb.append(",AccountNumber=" + AccountNumber);
			sb.append(",Website=" + Website);
			sb.append(",OwnerId=" + OwnerId);
			sb.append(",CreatedDate=" + String.valueOf(CreatedDate));
			sb.append(",CreatedById=" + CreatedById);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Id, other.Id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tSalesforceInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tSalesforceInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						context.filePath + "\\Output\\Source_AccountExport.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
							.substring(0, fileName_tFileOutputDelimited_1
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);
				String[] headColutFileOutputDelimited_1 = new String[14];
				class CSVBasicSet_tFileOutputDelimited_1 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_1[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_1 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_1[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator(",");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_1[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_1 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_1[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_1[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_1 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_1[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_1 = 0;
				int splitEvery_tFileOutputDelimited_1 = 1000;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				CSVBasicSet_tFileOutputDelimited_1 csvSettings_tFileOutputDelimited_1 = new CSVBasicSet_tFileOutputDelimited_1();
				csvSettings_tFileOutputDelimited_1.setFieldSeparator(",");
				csvSettings_tFileOutputDelimited_1.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_1.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null
						&& directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
							directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = null;

				java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				if (fileToDelete_tFileOutputDelimited_1.exists()) {
					fileToDelete_tFileOutputDelimited_1.delete();
				}
				CsvWritertFileOutputDelimited_1 = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(
								new java.io.OutputStreamWriter(
										new java.io.FileOutputStream(
												fileName_tFileOutputDelimited_1,
												false), "ISO-8859-15")));
				CsvWritertFileOutputDelimited_1
						.setSeparator(csvSettings_tFileOutputDelimited_1
								.getFieldDelim());
				if (!csvSettings_tFileOutputDelimited_1
						.isUseCRLFRecordDelimiter()
						&& csvSettings_tFileOutputDelimited_1.getRowDelim() != '\r'
						&& csvSettings_tFileOutputDelimited_1.getRowDelim() != '\n') {
					CsvWritertFileOutputDelimited_1.setLineEnd(""
							+ csvSettings_tFileOutputDelimited_1.getRowDelim());
				}
				if (filetFileOutputDelimited_1.length() == 0) {
					headColutFileOutputDelimited_1[0] = "Id";
					headColutFileOutputDelimited_1[1] = "Name";
					headColutFileOutputDelimited_1[2] = "BillingStreet";
					headColutFileOutputDelimited_1[3] = "BillingCity";
					headColutFileOutputDelimited_1[4] = "BillingState";
					headColutFileOutputDelimited_1[5] = "BillingPostalCode";
					headColutFileOutputDelimited_1[6] = "BillingCountry";
					headColutFileOutputDelimited_1[7] = "Phone";
					headColutFileOutputDelimited_1[8] = "Fax";
					headColutFileOutputDelimited_1[9] = "AccountNumber";
					headColutFileOutputDelimited_1[10] = "Website";
					headColutFileOutputDelimited_1[11] = "OwnerId";
					headColutFileOutputDelimited_1[12] = "CreatedDate";
					headColutFileOutputDelimited_1[13] = "CreatedById";
					CsvWritertFileOutputDelimited_1
							.writeNext(headColutFileOutputDelimited_1);
					CsvWritertFileOutputDelimited_1.flush();
				}
				CsvWritertFileOutputDelimited_1
						.setEscapeChar(csvSettings_tFileOutputDelimited_1
								.getEscapeChar());
				CsvWritertFileOutputDelimited_1
						.setQuoteChar(csvSettings_tFileOutputDelimited_1
								.getTextEnclosure());
				CsvWritertFileOutputDelimited_1
						.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

				resourceMap.put("CsvWriter_tFileOutputDelimited_1",
						CsvWritertFileOutputDelimited_1);
				resourceMap.put("nb_line_tFileOutputDelimited_1",
						nb_line_tFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tSalesforceInput_1 begin ] start
				 */

				ok_Hash.put("tSalesforceInput_1", false);
				start_Hash
						.put("tSalesforceInput_1", System.currentTimeMillis());

				currentComponent = "tSalesforceInput_1";

				int tos_count_tSalesforceInput_1 = 0;

				int nb_line_tSalesforceInput_1 = 0;
				int limit_tSalesforceInput_1 = -1;
				System.setProperty("org.apache.commons.logging.Log",
						"org.apache.commons.logging.impl.NoOpLog");
				org.talend.salesforceBulk.SforceBulkConnection sforceConn_tSalesforceInput_1 = null;

				if (globalMap.get("conn_tSalesforceConnection_1") == null) {
					throw new RuntimeException(
							"Get null connection from tSalesforceConnection_1");
				}
				sforceConn_tSalesforceInput_1 = (org.talend.salesforceBulk.SforceBulkConnection) globalMap
						.get("conn_tSalesforceConnection_1");

				org.talend.salesforceBulk.SalesforceBulkAPI sforceBulk_tSalesforceInput_1 = new org.talend.salesforceBulk.SalesforceBulkAPI(
						sforceConn_tSalesforceInput_1);

				StringBuilder sql_tSalesforceInput_1 = new StringBuilder(
						"select ");
				sql_tSalesforceInput_1
						.append("Id,Name,BillingStreet,BillingCity,BillingState,BillingPostalCode,BillingCountry,Phone,Fax,AccountNumber,Website,OwnerId,CreatedDate,CreatedById");

				sql_tSalesforceInput_1.append(" from ");
				sql_tSalesforceInput_1.append("Account");

				String condition_tSalesforceInput_1 = "";
				if (condition_tSalesforceInput_1 != null
						&& !("".equals(condition_tSalesforceInput_1))) {
					sql_tSalesforceInput_1.append(" where ").append(
							condition_tSalesforceInput_1);
				}

				sforceBulk_tSalesforceInput_1.doBulkQuery("Account",
						sql_tSalesforceInput_1.toString(), 30);
				String[] queryResultIDs_tSalesforceInput_1 = sforceBulk_tSalesforceInput_1
						.getQueryResultIDs();
				for (String queryResultId_tSalesforceInput_1 : queryResultIDs_tSalesforceInput_1) {
					org.talend.salesforceBulk.ResultSet resultSet_tSalesforceInput_1 = sforceBulk_tSalesforceInput_1
							.getQueryResultSet(queryResultId_tSalesforceInput_1);
					java.util.Map<String, String> resultMessage_tSalesforceInput_1 = null;
					while ((resultMessage_tSalesforceInput_1 = resultSet_tSalesforceInput_1
							.next()) != null) {
						nb_line_tSalesforceInput_1++;
						String value_tSalesforceInput_1 = null;

						value_tSalesforceInput_1 = resultMessage_tSalesforceInput_1
								.get("Id");
						if (value_tSalesforceInput_1 != null
								&& !"".equals(value_tSalesforceInput_1)) {

							row1.Id = value_tSalesforceInput_1;

						} else {
							row1.Id = null;
						}

						value_tSalesforceInput_1 = resultMessage_tSalesforceInput_1
								.get("Name");
						if (value_tSalesforceInput_1 != null
								&& !"".equals(value_tSalesforceInput_1)) {

							row1.Name = value_tSalesforceInput_1;

						} else {
							row1.Name = null;
						}

						value_tSalesforceInput_1 = resultMessage_tSalesforceInput_1
								.get("BillingStreet");
						if (value_tSalesforceInput_1 != null
								&& !"".equals(value_tSalesforceInput_1)) {

							row1.BillingStreet = value_tSalesforceInput_1;

						} else {
							row1.BillingStreet = null;
						}

						value_tSalesforceInput_1 = resultMessage_tSalesforceInput_1
								.get("BillingCity");
						if (value_tSalesforceInput_1 != null
								&& !"".equals(value_tSalesforceInput_1)) {

							row1.BillingCity = value_tSalesforceInput_1;

						} else {
							row1.BillingCity = null;
						}

						value_tSalesforceInput_1 = resultMessage_tSalesforceInput_1
								.get("BillingState");
						if (value_tSalesforceInput_1 != null
								&& !"".equals(value_tSalesforceInput_1)) {

							row1.BillingState = value_tSalesforceInput_1;

						} else {
							row1.BillingState = null;
						}

						value_tSalesforceInput_1 = resultMessage_tSalesforceInput_1
								.get("BillingPostalCode");
						if (value_tSalesforceInput_1 != null
								&& !"".equals(value_tSalesforceInput_1)) {

							row1.BillingPostalCode = value_tSalesforceInput_1;

						} else {
							row1.BillingPostalCode = null;
						}

						value_tSalesforceInput_1 = resultMessage_tSalesforceInput_1
								.get("BillingCountry");
						if (value_tSalesforceInput_1 != null
								&& !"".equals(value_tSalesforceInput_1)) {

							row1.BillingCountry = value_tSalesforceInput_1;

						} else {
							row1.BillingCountry = null;
						}

						value_tSalesforceInput_1 = resultMessage_tSalesforceInput_1
								.get("Phone");
						if (value_tSalesforceInput_1 != null
								&& !"".equals(value_tSalesforceInput_1)) {

							row1.Phone = value_tSalesforceInput_1;

						} else {
							row1.Phone = null;
						}

						value_tSalesforceInput_1 = resultMessage_tSalesforceInput_1
								.get("Fax");
						if (value_tSalesforceInput_1 != null
								&& !"".equals(value_tSalesforceInput_1)) {

							row1.Fax = value_tSalesforceInput_1;

						} else {
							row1.Fax = null;
						}

						value_tSalesforceInput_1 = resultMessage_tSalesforceInput_1
								.get("AccountNumber");
						if (value_tSalesforceInput_1 != null
								&& !"".equals(value_tSalesforceInput_1)) {

							row1.AccountNumber = value_tSalesforceInput_1;

						} else {
							row1.AccountNumber = null;
						}

						value_tSalesforceInput_1 = resultMessage_tSalesforceInput_1
								.get("Website");
						if (value_tSalesforceInput_1 != null
								&& !"".equals(value_tSalesforceInput_1)) {

							row1.Website = value_tSalesforceInput_1;

						} else {
							row1.Website = null;
						}

						value_tSalesforceInput_1 = resultMessage_tSalesforceInput_1
								.get("OwnerId");
						if (value_tSalesforceInput_1 != null
								&& !"".equals(value_tSalesforceInput_1)) {

							row1.OwnerId = value_tSalesforceInput_1;

						} else {
							row1.OwnerId = null;
						}

						value_tSalesforceInput_1 = resultMessage_tSalesforceInput_1
								.get("CreatedDate");
						if (value_tSalesforceInput_1 != null
								&& !"".equals(value_tSalesforceInput_1)) {

							row1.CreatedDate = ParserUtils.parseTo_Date(
									value_tSalesforceInput_1,
									context.dateTimeString);

						} else {
							row1.CreatedDate = null;
						}

						value_tSalesforceInput_1 = resultMessage_tSalesforceInput_1
								.get("CreatedById");
						if (value_tSalesforceInput_1 != null
								&& !"".equals(value_tSalesforceInput_1)) {

							row1.CreatedById = value_tSalesforceInput_1;

						} else {
							row1.CreatedById = null;
						}

						/**
						 * [tSalesforceInput_1 begin ] stop
						 */

						/**
						 * [tSalesforceInput_1 main ] start
						 */

						currentComponent = "tSalesforceInput_1";

						tos_count_tSalesforceInput_1++;

						/**
						 * [tSalesforceInput_1 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_1 main ] start
						 */

						currentComponent = "tFileOutputDelimited_1";

						String[] rowtFileOutputDelimited_1 = new String[14];
						rowtFileOutputDelimited_1[0] = row1.Id == null ? null
								: row1.Id;
						rowtFileOutputDelimited_1[1] = row1.Name == null ? null
								: row1.Name;
						rowtFileOutputDelimited_1[2] = row1.BillingStreet == null ? null
								: row1.BillingStreet;
						rowtFileOutputDelimited_1[3] = row1.BillingCity == null ? null
								: row1.BillingCity;
						rowtFileOutputDelimited_1[4] = row1.BillingState == null ? null
								: row1.BillingState;
						rowtFileOutputDelimited_1[5] = row1.BillingPostalCode == null ? null
								: row1.BillingPostalCode;
						rowtFileOutputDelimited_1[6] = row1.BillingCountry == null ? null
								: row1.BillingCountry;
						rowtFileOutputDelimited_1[7] = row1.Phone == null ? null
								: row1.Phone;
						rowtFileOutputDelimited_1[8] = row1.Fax == null ? null
								: row1.Fax;
						rowtFileOutputDelimited_1[9] = row1.AccountNumber == null ? null
								: row1.AccountNumber;
						rowtFileOutputDelimited_1[10] = row1.Website == null ? null
								: row1.Website;
						rowtFileOutputDelimited_1[11] = row1.OwnerId == null ? null
								: row1.OwnerId;
						rowtFileOutputDelimited_1[12] = row1.CreatedDate == null ? null
								: FormatterUtils.format_Date(row1.CreatedDate,
										context.dateTimeString);
						rowtFileOutputDelimited_1[13] = row1.CreatedById == null ? null
								: row1.CreatedById;
						nb_line_tFileOutputDelimited_1++;
						resourceMap.put("nb_line_tFileOutputDelimited_1",
								nb_line_tFileOutputDelimited_1);
						CsvWritertFileOutputDelimited_1
								.writeNext(rowtFileOutputDelimited_1);

						tos_count_tFileOutputDelimited_1++;

						/**
						 * [tFileOutputDelimited_1 main ] stop
						 */

						/**
						 * [tSalesforceInput_1 end ] start
						 */

						currentComponent = "tSalesforceInput_1";

					}
				}

				globalMap.put("tSalesforceInput_1_NB_LINE",
						nb_line_tSalesforceInput_1);

				ok_Hash.put("tSalesforceInput_1", true);
				end_Hash.put("tSalesforceInput_1", System.currentTimeMillis());

				/**
				 * [tSalesforceInput_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (CsvWritertFileOutputDelimited_1 != null) {
					CsvWritertFileOutputDelimited_1.close();
				}

				globalMap.put("tFileOutputDelimited_1_NB_LINE",
						nb_line_tFileOutputDelimited_1);

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tSalesforceInput_1:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tFileInputDelimited_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tSalesforceInput_1 finally ] start
				 */

				currentComponent = "tSalesforceInput_1";

				/**
				 * [tSalesforceInput_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_1");

					if (CsvWritertFileOutputDelimited_1 != null) {
						CsvWritertFileOutputDelimited_1.close();
					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tSalesforceInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_DF2019_Migrate_Accounts = new byte[0];
		static byte[] commonByteArray_DF2019_Migrate_Accounts = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ExternalID__c;

		public String getExternalID__c() {
			return this.ExternalID__c;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String BillingStreet;

		public String getBillingStreet() {
			return this.BillingStreet;
		}

		public String BillingCity;

		public String getBillingCity() {
			return this.BillingCity;
		}

		public String BillingState;

		public String getBillingState() {
			return this.BillingState;
		}

		public String BillingPostalCode;

		public String getBillingPostalCode() {
			return this.BillingPostalCode;
		}

		public String BillingCountry;

		public String getBillingCountry() {
			return this.BillingCountry;
		}

		public String Phone;

		public String getPhone() {
			return this.Phone;
		}

		public String Fax;

		public String getFax() {
			return this.Fax;
		}

		public String AccountNumber;

		public String getAccountNumber() {
			return this.AccountNumber;
		}

		public String Website;

		public String getWebsite() {
			return this.Website;
		}

		public String OwnerId;

		public String getOwnerId() {
			return this.OwnerId;
		}

		public java.util.Date CreatedDate;

		public java.util.Date getCreatedDate() {
			return this.CreatedDate;
		}

		public String CreatedById;

		public String getCreatedById() {
			return this.CreatedById;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.ExternalID__c == null) ? 0
								: this.ExternalID__c.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row7Struct other = (row7Struct) obj;

			if (this.ExternalID__c == null) {
				if (other.ExternalID__c != null)
					return false;

			} else if (!this.ExternalID__c.equals(other.ExternalID__c))

				return false;

			return true;
		}

		public void copyDataTo(row7Struct other) {

			other.ExternalID__c = this.ExternalID__c;
			other.Name = this.Name;
			other.BillingStreet = this.BillingStreet;
			other.BillingCity = this.BillingCity;
			other.BillingState = this.BillingState;
			other.BillingPostalCode = this.BillingPostalCode;
			other.BillingCountry = this.BillingCountry;
			other.Phone = this.Phone;
			other.Fax = this.Fax;
			other.AccountNumber = this.AccountNumber;
			other.Website = this.Website;
			other.OwnerId = this.OwnerId;
			other.CreatedDate = this.CreatedDate;
			other.CreatedById = this.CreatedById;

		}

		public void copyKeysDataTo(row7Struct other) {

			other.ExternalID__c = this.ExternalID__c;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DF2019_Migrate_Accounts.length) {
					if (length < 1024
							&& commonByteArray_DF2019_Migrate_Accounts.length == 0) {
						commonByteArray_DF2019_Migrate_Accounts = new byte[1024];
					} else {
						commonByteArray_DF2019_Migrate_Accounts = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DF2019_Migrate_Accounts, 0,
						length);
				strReturn = new String(commonByteArray_DF2019_Migrate_Accounts,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DF2019_Migrate_Accounts) {

				try {

					int length = 0;

					this.ExternalID__c = readString(dis);

					this.Name = readString(dis);

					this.BillingStreet = readString(dis);

					this.BillingCity = readString(dis);

					this.BillingState = readString(dis);

					this.BillingPostalCode = readString(dis);

					this.BillingCountry = readString(dis);

					this.Phone = readString(dis);

					this.Fax = readString(dis);

					this.AccountNumber = readString(dis);

					this.Website = readString(dis);

					this.OwnerId = readString(dis);

					this.CreatedDate = readDate(dis);

					this.CreatedById = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ExternalID__c, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.BillingStreet, dos);

				// String

				writeString(this.BillingCity, dos);

				// String

				writeString(this.BillingState, dos);

				// String

				writeString(this.BillingPostalCode, dos);

				// String

				writeString(this.BillingCountry, dos);

				// String

				writeString(this.Phone, dos);

				// String

				writeString(this.Fax, dos);

				// String

				writeString(this.AccountNumber, dos);

				// String

				writeString(this.Website, dos);

				// String

				writeString(this.OwnerId, dos);

				// java.util.Date

				writeDate(this.CreatedDate, dos);

				// String

				writeString(this.CreatedById, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ExternalID__c=" + ExternalID__c);
			sb.append(",Name=" + Name);
			sb.append(",BillingStreet=" + BillingStreet);
			sb.append(",BillingCity=" + BillingCity);
			sb.append(",BillingState=" + BillingState);
			sb.append(",BillingPostalCode=" + BillingPostalCode);
			sb.append(",BillingCountry=" + BillingCountry);
			sb.append(",Phone=" + Phone);
			sb.append(",Fax=" + Fax);
			sb.append(",AccountNumber=" + AccountNumber);
			sb.append(",Website=" + Website);
			sb.append(",OwnerId=" + OwnerId);
			sb.append(",CreatedDate=" + String.valueOf(CreatedDate));
			sb.append(",CreatedById=" + CreatedById);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ExternalID__c,
					other.ExternalID__c);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_DF2019_Migrate_Accounts = new byte[0];
		static byte[] commonByteArray_DF2019_Migrate_Accounts = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String Id;

		public String getId() {
			return this.Id;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String BillingStreet;

		public String getBillingStreet() {
			return this.BillingStreet;
		}

		public String BillingCity;

		public String getBillingCity() {
			return this.BillingCity;
		}

		public String BillingState;

		public String getBillingState() {
			return this.BillingState;
		}

		public String BillingPostalCode;

		public String getBillingPostalCode() {
			return this.BillingPostalCode;
		}

		public String BillingCountry;

		public String getBillingCountry() {
			return this.BillingCountry;
		}

		public String Phone;

		public String getPhone() {
			return this.Phone;
		}

		public String Fax;

		public String getFax() {
			return this.Fax;
		}

		public String AccountNumber;

		public String getAccountNumber() {
			return this.AccountNumber;
		}

		public String Website;

		public String getWebsite() {
			return this.Website;
		}

		public String OwnerId;

		public String getOwnerId() {
			return this.OwnerId;
		}

		public java.util.Date CreatedDate;

		public java.util.Date getCreatedDate() {
			return this.CreatedDate;
		}

		public String CreatedById;

		public String getCreatedById() {
			return this.CreatedById;
		}

		public String Dest_CreatedById;

		public String getDest_CreatedById() {
			return this.Dest_CreatedById;
		}

		public String Dest_OwnerId;

		public String getDest_OwnerId() {
			return this.Dest_OwnerId;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.Id == null) ? 0 : this.Id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row6Struct other = (row6Struct) obj;

			if (this.Id == null) {
				if (other.Id != null)
					return false;

			} else if (!this.Id.equals(other.Id))

				return false;

			return true;
		}

		public void copyDataTo(row6Struct other) {

			other.Id = this.Id;
			other.Name = this.Name;
			other.BillingStreet = this.BillingStreet;
			other.BillingCity = this.BillingCity;
			other.BillingState = this.BillingState;
			other.BillingPostalCode = this.BillingPostalCode;
			other.BillingCountry = this.BillingCountry;
			other.Phone = this.Phone;
			other.Fax = this.Fax;
			other.AccountNumber = this.AccountNumber;
			other.Website = this.Website;
			other.OwnerId = this.OwnerId;
			other.CreatedDate = this.CreatedDate;
			other.CreatedById = this.CreatedById;
			other.Dest_CreatedById = this.Dest_CreatedById;
			other.Dest_OwnerId = this.Dest_OwnerId;

		}

		public void copyKeysDataTo(row6Struct other) {

			other.Id = this.Id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DF2019_Migrate_Accounts.length) {
					if (length < 1024
							&& commonByteArray_DF2019_Migrate_Accounts.length == 0) {
						commonByteArray_DF2019_Migrate_Accounts = new byte[1024];
					} else {
						commonByteArray_DF2019_Migrate_Accounts = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DF2019_Migrate_Accounts, 0,
						length);
				strReturn = new String(commonByteArray_DF2019_Migrate_Accounts,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DF2019_Migrate_Accounts) {

				try {

					int length = 0;

					this.Id = readString(dis);

					this.Name = readString(dis);

					this.BillingStreet = readString(dis);

					this.BillingCity = readString(dis);

					this.BillingState = readString(dis);

					this.BillingPostalCode = readString(dis);

					this.BillingCountry = readString(dis);

					this.Phone = readString(dis);

					this.Fax = readString(dis);

					this.AccountNumber = readString(dis);

					this.Website = readString(dis);

					this.OwnerId = readString(dis);

					this.CreatedDate = readDate(dis);

					this.CreatedById = readString(dis);

					this.Dest_CreatedById = readString(dis);

					this.Dest_OwnerId = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Id, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.BillingStreet, dos);

				// String

				writeString(this.BillingCity, dos);

				// String

				writeString(this.BillingState, dos);

				// String

				writeString(this.BillingPostalCode, dos);

				// String

				writeString(this.BillingCountry, dos);

				// String

				writeString(this.Phone, dos);

				// String

				writeString(this.Fax, dos);

				// String

				writeString(this.AccountNumber, dos);

				// String

				writeString(this.Website, dos);

				// String

				writeString(this.OwnerId, dos);

				// java.util.Date

				writeDate(this.CreatedDate, dos);

				// String

				writeString(this.CreatedById, dos);

				// String

				writeString(this.Dest_CreatedById, dos);

				// String

				writeString(this.Dest_OwnerId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Id=" + Id);
			sb.append(",Name=" + Name);
			sb.append(",BillingStreet=" + BillingStreet);
			sb.append(",BillingCity=" + BillingCity);
			sb.append(",BillingState=" + BillingState);
			sb.append(",BillingPostalCode=" + BillingPostalCode);
			sb.append(",BillingCountry=" + BillingCountry);
			sb.append(",Phone=" + Phone);
			sb.append(",Fax=" + Fax);
			sb.append(",AccountNumber=" + AccountNumber);
			sb.append(",Website=" + Website);
			sb.append(",OwnerId=" + OwnerId);
			sb.append(",CreatedDate=" + String.valueOf(CreatedDate));
			sb.append(",CreatedById=" + CreatedById);
			sb.append(",Dest_CreatedById=" + Dest_CreatedById);
			sb.append(",Dest_OwnerId=" + Dest_OwnerId);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Id, other.Id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_DF2019_Migrate_Accounts = new byte[0];
		static byte[] commonByteArray_DF2019_Migrate_Accounts = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String Id;

		public String getId() {
			return this.Id;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String BillingStreet;

		public String getBillingStreet() {
			return this.BillingStreet;
		}

		public String BillingCity;

		public String getBillingCity() {
			return this.BillingCity;
		}

		public String BillingState;

		public String getBillingState() {
			return this.BillingState;
		}

		public String BillingPostalCode;

		public String getBillingPostalCode() {
			return this.BillingPostalCode;
		}

		public String BillingCountry;

		public String getBillingCountry() {
			return this.BillingCountry;
		}

		public String Phone;

		public String getPhone() {
			return this.Phone;
		}

		public String Fax;

		public String getFax() {
			return this.Fax;
		}

		public String AccountNumber;

		public String getAccountNumber() {
			return this.AccountNumber;
		}

		public String Website;

		public String getWebsite() {
			return this.Website;
		}

		public String OwnerId;

		public String getOwnerId() {
			return this.OwnerId;
		}

		public java.util.Date CreatedDate;

		public java.util.Date getCreatedDate() {
			return this.CreatedDate;
		}

		public String CreatedById;

		public String getCreatedById() {
			return this.CreatedById;
		}

		public String Dest_CreatedById;

		public String getDest_CreatedById() {
			return this.Dest_CreatedById;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.Id == null) ? 0 : this.Id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row5Struct other = (row5Struct) obj;

			if (this.Id == null) {
				if (other.Id != null)
					return false;

			} else if (!this.Id.equals(other.Id))

				return false;

			return true;
		}

		public void copyDataTo(row5Struct other) {

			other.Id = this.Id;
			other.Name = this.Name;
			other.BillingStreet = this.BillingStreet;
			other.BillingCity = this.BillingCity;
			other.BillingState = this.BillingState;
			other.BillingPostalCode = this.BillingPostalCode;
			other.BillingCountry = this.BillingCountry;
			other.Phone = this.Phone;
			other.Fax = this.Fax;
			other.AccountNumber = this.AccountNumber;
			other.Website = this.Website;
			other.OwnerId = this.OwnerId;
			other.CreatedDate = this.CreatedDate;
			other.CreatedById = this.CreatedById;
			other.Dest_CreatedById = this.Dest_CreatedById;

		}

		public void copyKeysDataTo(row5Struct other) {

			other.Id = this.Id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DF2019_Migrate_Accounts.length) {
					if (length < 1024
							&& commonByteArray_DF2019_Migrate_Accounts.length == 0) {
						commonByteArray_DF2019_Migrate_Accounts = new byte[1024];
					} else {
						commonByteArray_DF2019_Migrate_Accounts = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DF2019_Migrate_Accounts, 0,
						length);
				strReturn = new String(commonByteArray_DF2019_Migrate_Accounts,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DF2019_Migrate_Accounts) {

				try {

					int length = 0;

					this.Id = readString(dis);

					this.Name = readString(dis);

					this.BillingStreet = readString(dis);

					this.BillingCity = readString(dis);

					this.BillingState = readString(dis);

					this.BillingPostalCode = readString(dis);

					this.BillingCountry = readString(dis);

					this.Phone = readString(dis);

					this.Fax = readString(dis);

					this.AccountNumber = readString(dis);

					this.Website = readString(dis);

					this.OwnerId = readString(dis);

					this.CreatedDate = readDate(dis);

					this.CreatedById = readString(dis);

					this.Dest_CreatedById = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Id, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.BillingStreet, dos);

				// String

				writeString(this.BillingCity, dos);

				// String

				writeString(this.BillingState, dos);

				// String

				writeString(this.BillingPostalCode, dos);

				// String

				writeString(this.BillingCountry, dos);

				// String

				writeString(this.Phone, dos);

				// String

				writeString(this.Fax, dos);

				// String

				writeString(this.AccountNumber, dos);

				// String

				writeString(this.Website, dos);

				// String

				writeString(this.OwnerId, dos);

				// java.util.Date

				writeDate(this.CreatedDate, dos);

				// String

				writeString(this.CreatedById, dos);

				// String

				writeString(this.Dest_CreatedById, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Id=" + Id);
			sb.append(",Name=" + Name);
			sb.append(",BillingStreet=" + BillingStreet);
			sb.append(",BillingCity=" + BillingCity);
			sb.append(",BillingState=" + BillingState);
			sb.append(",BillingPostalCode=" + BillingPostalCode);
			sb.append(",BillingCountry=" + BillingCountry);
			sb.append(",Phone=" + Phone);
			sb.append(",Fax=" + Fax);
			sb.append(",AccountNumber=" + AccountNumber);
			sb.append(",Website=" + Website);
			sb.append(",OwnerId=" + OwnerId);
			sb.append(",CreatedDate=" + String.valueOf(CreatedDate));
			sb.append(",CreatedById=" + CreatedById);
			sb.append(",Dest_CreatedById=" + Dest_CreatedById);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Id, other.Id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_DF2019_Migrate_Accounts = new byte[0];
		static byte[] commonByteArray_DF2019_Migrate_Accounts = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String Id;

		public String getId() {
			return this.Id;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String BillingStreet;

		public String getBillingStreet() {
			return this.BillingStreet;
		}

		public String BillingCity;

		public String getBillingCity() {
			return this.BillingCity;
		}

		public String BillingState;

		public String getBillingState() {
			return this.BillingState;
		}

		public String BillingPostalCode;

		public String getBillingPostalCode() {
			return this.BillingPostalCode;
		}

		public String BillingCountry;

		public String getBillingCountry() {
			return this.BillingCountry;
		}

		public String Phone;

		public String getPhone() {
			return this.Phone;
		}

		public String Fax;

		public String getFax() {
			return this.Fax;
		}

		public String AccountNumber;

		public String getAccountNumber() {
			return this.AccountNumber;
		}

		public String Website;

		public String getWebsite() {
			return this.Website;
		}

		public String OwnerId;

		public String getOwnerId() {
			return this.OwnerId;
		}

		public java.util.Date CreatedDate;

		public java.util.Date getCreatedDate() {
			return this.CreatedDate;
		}

		public String CreatedById;

		public String getCreatedById() {
			return this.CreatedById;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.Id == null) ? 0 : this.Id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.Id == null) {
				if (other.Id != null)
					return false;

			} else if (!this.Id.equals(other.Id))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.Id = this.Id;
			other.Name = this.Name;
			other.BillingStreet = this.BillingStreet;
			other.BillingCity = this.BillingCity;
			other.BillingState = this.BillingState;
			other.BillingPostalCode = this.BillingPostalCode;
			other.BillingCountry = this.BillingCountry;
			other.Phone = this.Phone;
			other.Fax = this.Fax;
			other.AccountNumber = this.AccountNumber;
			other.Website = this.Website;
			other.OwnerId = this.OwnerId;
			other.CreatedDate = this.CreatedDate;
			other.CreatedById = this.CreatedById;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.Id = this.Id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DF2019_Migrate_Accounts.length) {
					if (length < 1024
							&& commonByteArray_DF2019_Migrate_Accounts.length == 0) {
						commonByteArray_DF2019_Migrate_Accounts = new byte[1024];
					} else {
						commonByteArray_DF2019_Migrate_Accounts = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DF2019_Migrate_Accounts, 0,
						length);
				strReturn = new String(commonByteArray_DF2019_Migrate_Accounts,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DF2019_Migrate_Accounts) {

				try {

					int length = 0;

					this.Id = readString(dis);

					this.Name = readString(dis);

					this.BillingStreet = readString(dis);

					this.BillingCity = readString(dis);

					this.BillingState = readString(dis);

					this.BillingPostalCode = readString(dis);

					this.BillingCountry = readString(dis);

					this.Phone = readString(dis);

					this.Fax = readString(dis);

					this.AccountNumber = readString(dis);

					this.Website = readString(dis);

					this.OwnerId = readString(dis);

					this.CreatedDate = readDate(dis);

					this.CreatedById = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Id, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.BillingStreet, dos);

				// String

				writeString(this.BillingCity, dos);

				// String

				writeString(this.BillingState, dos);

				// String

				writeString(this.BillingPostalCode, dos);

				// String

				writeString(this.BillingCountry, dos);

				// String

				writeString(this.Phone, dos);

				// String

				writeString(this.Fax, dos);

				// String

				writeString(this.AccountNumber, dos);

				// String

				writeString(this.Website, dos);

				// String

				writeString(this.OwnerId, dos);

				// java.util.Date

				writeDate(this.CreatedDate, dos);

				// String

				writeString(this.CreatedById, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Id=" + Id);
			sb.append(",Name=" + Name);
			sb.append(",BillingStreet=" + BillingStreet);
			sb.append(",BillingCity=" + BillingCity);
			sb.append(",BillingState=" + BillingState);
			sb.append(",BillingPostalCode=" + BillingPostalCode);
			sb.append(",BillingCountry=" + BillingCountry);
			sb.append(",Phone=" + Phone);
			sb.append(",Fax=" + Fax);
			sb.append(",AccountNumber=" + AccountNumber);
			sb.append(",Website=" + Website);
			sb.append(",OwnerId=" + OwnerId);
			sb.append(",CreatedDate=" + String.valueOf(CreatedDate));
			sb.append(",CreatedById=" + CreatedById);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Id, other.Id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_1Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_1Struct> {
		final static byte[] commonByteArrayLock_DF2019_Migrate_Accounts = new byte[0];
		static byte[] commonByteArray_DF2019_Migrate_Accounts = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String Id;

		public String getId() {
			return this.Id;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String BillingStreet;

		public String getBillingStreet() {
			return this.BillingStreet;
		}

		public String BillingCity;

		public String getBillingCity() {
			return this.BillingCity;
		}

		public String BillingState;

		public String getBillingState() {
			return this.BillingState;
		}

		public String BillingPostalCode;

		public String getBillingPostalCode() {
			return this.BillingPostalCode;
		}

		public String BillingCountry;

		public String getBillingCountry() {
			return this.BillingCountry;
		}

		public String Phone;

		public String getPhone() {
			return this.Phone;
		}

		public String Fax;

		public String getFax() {
			return this.Fax;
		}

		public String AccountNumber;

		public String getAccountNumber() {
			return this.AccountNumber;
		}

		public String Website;

		public String getWebsite() {
			return this.Website;
		}

		public String OwnerId;

		public String getOwnerId() {
			return this.OwnerId;
		}

		public java.util.Date CreatedDate;

		public java.util.Date getCreatedDate() {
			return this.CreatedDate;
		}

		public String CreatedById;

		public String getCreatedById() {
			return this.CreatedById;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.Id == null) ? 0 : this.Id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tFileInputDelimited_1Struct other = (after_tFileInputDelimited_1Struct) obj;

			if (this.Id == null) {
				if (other.Id != null)
					return false;

			} else if (!this.Id.equals(other.Id))

				return false;

			return true;
		}

		public void copyDataTo(after_tFileInputDelimited_1Struct other) {

			other.Id = this.Id;
			other.Name = this.Name;
			other.BillingStreet = this.BillingStreet;
			other.BillingCity = this.BillingCity;
			other.BillingState = this.BillingState;
			other.BillingPostalCode = this.BillingPostalCode;
			other.BillingCountry = this.BillingCountry;
			other.Phone = this.Phone;
			other.Fax = this.Fax;
			other.AccountNumber = this.AccountNumber;
			other.Website = this.Website;
			other.OwnerId = this.OwnerId;
			other.CreatedDate = this.CreatedDate;
			other.CreatedById = this.CreatedById;

		}

		public void copyKeysDataTo(after_tFileInputDelimited_1Struct other) {

			other.Id = this.Id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DF2019_Migrate_Accounts.length) {
					if (length < 1024
							&& commonByteArray_DF2019_Migrate_Accounts.length == 0) {
						commonByteArray_DF2019_Migrate_Accounts = new byte[1024];
					} else {
						commonByteArray_DF2019_Migrate_Accounts = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DF2019_Migrate_Accounts, 0,
						length);
				strReturn = new String(commonByteArray_DF2019_Migrate_Accounts,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DF2019_Migrate_Accounts) {

				try {

					int length = 0;

					this.Id = readString(dis);

					this.Name = readString(dis);

					this.BillingStreet = readString(dis);

					this.BillingCity = readString(dis);

					this.BillingState = readString(dis);

					this.BillingPostalCode = readString(dis);

					this.BillingCountry = readString(dis);

					this.Phone = readString(dis);

					this.Fax = readString(dis);

					this.AccountNumber = readString(dis);

					this.Website = readString(dis);

					this.OwnerId = readString(dis);

					this.CreatedDate = readDate(dis);

					this.CreatedById = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Id, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.BillingStreet, dos);

				// String

				writeString(this.BillingCity, dos);

				// String

				writeString(this.BillingState, dos);

				// String

				writeString(this.BillingPostalCode, dos);

				// String

				writeString(this.BillingCountry, dos);

				// String

				writeString(this.Phone, dos);

				// String

				writeString(this.Fax, dos);

				// String

				writeString(this.AccountNumber, dos);

				// String

				writeString(this.Website, dos);

				// String

				writeString(this.OwnerId, dos);

				// java.util.Date

				writeDate(this.CreatedDate, dos);

				// String

				writeString(this.CreatedById, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Id=" + Id);
			sb.append(",Name=" + Name);
			sb.append(",BillingStreet=" + BillingStreet);
			sb.append(",BillingCity=" + BillingCity);
			sb.append(",BillingState=" + BillingState);
			sb.append(",BillingPostalCode=" + BillingPostalCode);
			sb.append(",BillingCountry=" + BillingCountry);
			sb.append(",Phone=" + Phone);
			sb.append(",Fax=" + Fax);
			sb.append(",AccountNumber=" + AccountNumber);
			sb.append(",Website=" + Website);
			sb.append(",OwnerId=" + OwnerId);
			sb.append(",CreatedDate=" + String.valueOf(CreatedDate));
			sb.append(",CreatedById=" + CreatedById);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Id, other.Id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFileInputDelimited_2Process(globalMap);
				tFileInputDelimited_3Process(globalMap);

				row2Struct row2 = new row2Struct();
				row5Struct row5 = new row5Struct();
				row6Struct row6 = new row6Struct();
				row7Struct row7 = new row7Struct();

				/**
				 * [tFileOutputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_2", false);
				start_Hash.put("tFileOutputDelimited_2",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_2";

				int tos_count_tFileOutputDelimited_2 = 0;

				String fileName_tFileOutputDelimited_2 = "";
				fileName_tFileOutputDelimited_2 = (new java.io.File(
						context.filePath
								+ "\\Output\\Dest_AccountsToUpsert.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_2 = null;
				String extension_tFileOutputDelimited_2 = null;
				String directory_tFileOutputDelimited_2 = null;
				if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
							.substring(0, fileName_tFileOutputDelimited_2
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					}
					directory_tFileOutputDelimited_2 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_2 = true;
				java.io.File filetFileOutputDelimited_2 = new java.io.File(
						fileName_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",
						fileName_tFileOutputDelimited_2);
				String[] headColutFileOutputDelimited_2 = new String[14];
				class CSVBasicSet_tFileOutputDelimited_2 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_2[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_2 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_2[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator(",");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_2[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_2 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_2[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_2[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_2 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_2[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_2 = 0;
				int splitEvery_tFileOutputDelimited_2 = 1000;
				int splitedFileNo_tFileOutputDelimited_2 = 0;
				int currentRow_tFileOutputDelimited_2 = 0;

				CSVBasicSet_tFileOutputDelimited_2 csvSettings_tFileOutputDelimited_2 = new CSVBasicSet_tFileOutputDelimited_2();
				csvSettings_tFileOutputDelimited_2.setFieldSeparator(",");
				csvSettings_tFileOutputDelimited_2.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_2.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_2 != null
						&& directory_tFileOutputDelimited_2.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_2 = new java.io.File(
							directory_tFileOutputDelimited_2);
					if (!dir_tFileOutputDelimited_2.exists()) {
						dir_tFileOutputDelimited_2.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_2 = null;

				java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(
						fileName_tFileOutputDelimited_2);
				if (fileToDelete_tFileOutputDelimited_2.exists()) {
					fileToDelete_tFileOutputDelimited_2.delete();
				}
				CsvWritertFileOutputDelimited_2 = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(
								new java.io.OutputStreamWriter(
										new java.io.FileOutputStream(
												fileName_tFileOutputDelimited_2,
												false), "ISO-8859-15")));
				CsvWritertFileOutputDelimited_2
						.setSeparator(csvSettings_tFileOutputDelimited_2
								.getFieldDelim());
				if (!csvSettings_tFileOutputDelimited_2
						.isUseCRLFRecordDelimiter()
						&& csvSettings_tFileOutputDelimited_2.getRowDelim() != '\r'
						&& csvSettings_tFileOutputDelimited_2.getRowDelim() != '\n') {
					CsvWritertFileOutputDelimited_2.setLineEnd(""
							+ csvSettings_tFileOutputDelimited_2.getRowDelim());
				}
				if (filetFileOutputDelimited_2.length() == 0) {
					headColutFileOutputDelimited_2[0] = "ExternalID__c";
					headColutFileOutputDelimited_2[1] = "Name";
					headColutFileOutputDelimited_2[2] = "BillingStreet";
					headColutFileOutputDelimited_2[3] = "BillingCity";
					headColutFileOutputDelimited_2[4] = "BillingState";
					headColutFileOutputDelimited_2[5] = "BillingPostalCode";
					headColutFileOutputDelimited_2[6] = "BillingCountry";
					headColutFileOutputDelimited_2[7] = "Phone";
					headColutFileOutputDelimited_2[8] = "Fax";
					headColutFileOutputDelimited_2[9] = "AccountNumber";
					headColutFileOutputDelimited_2[10] = "Website";
					headColutFileOutputDelimited_2[11] = "OwnerId";
					headColutFileOutputDelimited_2[12] = "CreatedDate";
					headColutFileOutputDelimited_2[13] = "CreatedById";
					CsvWritertFileOutputDelimited_2
							.writeNext(headColutFileOutputDelimited_2);
					CsvWritertFileOutputDelimited_2.flush();
				}
				CsvWritertFileOutputDelimited_2
						.setEscapeChar(csvSettings_tFileOutputDelimited_2
								.getEscapeChar());
				CsvWritertFileOutputDelimited_2
						.setQuoteChar(csvSettings_tFileOutputDelimited_2
								.getTextEnclosure());
				CsvWritertFileOutputDelimited_2
						.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

				resourceMap.put("CsvWriter_tFileOutputDelimited_2",
						CsvWritertFileOutputDelimited_2);
				resourceMap.put("nb_line_tFileOutputDelimited_2",
						nb_line_tFileOutputDelimited_2);

				/**
				 * [tFileOutputDelimited_2 begin ] stop
				 */

				/**
				 * [tJavaRow_1 begin ] start
				 */

				ok_Hash.put("tJavaRow_1", false);
				start_Hash.put("tJavaRow_1", System.currentTimeMillis());

				currentComponent = "tJavaRow_1";

				int tos_count_tJavaRow_1 = 0;

				int nb_line_tJavaRow_1 = 0;

				/**
				 * [tJavaRow_1 begin ] stop
				 */

				/**
				 * [tJoin_2 begin ] start
				 */

				ok_Hash.put("tJoin_2", false);
				start_Hash.put("tJoin_2", System.currentTimeMillis());

				currentComponent = "tJoin_2";

				int tos_count_tJoin_2 = 0;

				final java.util.Map<row4Struct, row4Struct> tHash_tJoin_2 = (java.util.Map<row4Struct, row4Struct>) globalMap
						.get("tHash_row4");

				class Util_tJoin_2 {
					row4Struct lookupValue = null;
					row4Struct row4HashKey = new row4Struct();

					public boolean isJoined(row5Struct mainRow) {
						row4HashKey.ExternalID__c = mainRow.OwnerId;

						row4HashKey.hashCodeDirty = true;
						lookupValue = tHash_tJoin_2.get(row4HashKey);
						if (lookupValue != null) {
							return true;
						} else {
						}
						return false;
					}
				}

				Util_tJoin_2 util_tJoin_2 = new Util_tJoin_2();

				int nb_line_tJoin_2 = 0;

				/**
				 * [tJoin_2 begin ] stop
				 */

				/**
				 * [tJoin_1 begin ] start
				 */

				ok_Hash.put("tJoin_1", false);
				start_Hash.put("tJoin_1", System.currentTimeMillis());

				currentComponent = "tJoin_1";

				int tos_count_tJoin_1 = 0;

				final java.util.Map<row3Struct, row3Struct> tHash_tJoin_1 = (java.util.Map<row3Struct, row3Struct>) globalMap
						.get("tHash_row3");

				class Util_tJoin_1 {
					row3Struct lookupValue = null;
					row3Struct row3HashKey = new row3Struct();

					public boolean isJoined(row2Struct mainRow) {
						row3HashKey.ExternalID__c = mainRow.CreatedById;

						row3HashKey.hashCodeDirty = true;
						lookupValue = tHash_tJoin_1.get(row3HashKey);
						if (lookupValue != null) {
							return true;
						} else {
						}
						return false;
					}
				}

				Util_tJoin_1 util_tJoin_1 = new Util_tJoin_1();

				int nb_line_tJoin_1 = 0;

				/**
				 * [tJoin_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;

				char fieldSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ",").length() > 0) {
					fieldSeparator_tFileInputDelimited_1 = ((String) ",")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_1 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_1 = /**
				 * Start field
				 * tFileInputDelimited_1:FILENAME
				 */
				context.filePath + "\\Output\\Source_AccountExport.csv"/**
				 * End
				 * field tFileInputDelimited_1:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;

				try {

					String[] rowtFileInputDelimited_1 = null;
					int currentLinetFileInputDelimited_1 = 0;
					int outputLinetFileInputDelimited_1 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_1 = 0;
							if (footer_value_tFileInputDelimited_1 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_1,
									fieldSeparator_tFileInputDelimited_1[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_1)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_1[0]);
						}

						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
							csvReadertFileInputDelimited_1.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_1[0]);

						csvReadertFileInputDelimited_1.setQuoteChar('"');

						csvReadertFileInputDelimited_1
								.setEscapeChar(csvReadertFileInputDelimited_1
										.getQuoteChar());

						if (footer_tFileInputDelimited_1 > 0) {
							for (totalLinetFileInputDelimited_1 = 0; totalLinetFileInputDelimited_1 < 1; totalLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
							csvReadertFileInputDelimited_1
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_1.readNext()) {

								rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1
										.getValues();
								if (!(rowtFileInputDelimited_1.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_1[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_1++;

								}

							}
							int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1
									- footer_tFileInputDelimited_1 < 0 ? 0
									: totalLinetFileInputDelimited_1
											- footer_tFileInputDelimited_1;
							if (lastLinetFileInputDelimited_1 > 0) {
								lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1
										: lastLineTemptFileInputDelimited_1;
							} else {
								lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
							}

							csvReadertFileInputDelimited_1.close();
							if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_1,
										fieldSeparator_tFileInputDelimited_1[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_1)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_1[0]);
							}
							csvReadertFileInputDelimited_1
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
								csvReadertFileInputDelimited_1
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_1[0]);

							csvReadertFileInputDelimited_1.setQuoteChar('"');

							csvReadertFileInputDelimited_1
									.setEscapeChar(csvReadertFileInputDelimited_1
											.getQuoteChar());

						}

						if (limittFileInputDelimited_1 != 0) {
							for (currentLinetFileInputDelimited_1 = 0; currentLinetFileInputDelimited_1 < 1; currentLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
						}
						csvReadertFileInputDelimited_1
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_1 != 0
							&& csvReadertFileInputDelimited_1 != null
							&& csvReadertFileInputDelimited_1.readNext()) {
						rowstate_tFileInputDelimited_1.reset();

						rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1
								.getValues();

						if (rowtFileInputDelimited_1.length == 1
								&& ("\015").equals(rowtFileInputDelimited_1[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_1++;

						if (lastLinetFileInputDelimited_1 > -1
								&& currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
							break;
						}
						outputLinetFileInputDelimited_1++;
						if (limittFileInputDelimited_1 > 0
								&& outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
							break;
						}

						row2 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row2 = new row2Struct();
						try {

							char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) ",").length() > 0) {
								fieldSeparator_tFileInputDelimited_1_ListType = ((String) ",")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_1.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_1[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row2.Id = null;

								row2.Name = null;

								row2.BillingStreet = null;

								row2.BillingCity = null;

								row2.BillingState = null;

								row2.BillingPostalCode = null;

								row2.BillingCountry = null;

								row2.Phone = null;

								row2.Fax = null;

								row2.AccountNumber = null;

								row2.Website = null;

								row2.OwnerId = null;

								row2.CreatedDate = null;

								row2.CreatedById = null;

							} else {

								for (int i_tFileInputDelimited_1 = 0; i_tFileInputDelimited_1 < rowtFileInputDelimited_1.length; i_tFileInputDelimited_1++) {
									rowtFileInputDelimited_1[i_tFileInputDelimited_1] = rowtFileInputDelimited_1[i_tFileInputDelimited_1]
											.trim();
								}

								int columnIndexWithD_tFileInputDelimited_1 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_1 = 0;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.Id = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.Id = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 1;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.Name = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.Name = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 2;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.BillingStreet = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.BillingStreet = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 3;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.BillingCity = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.BillingCity = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 4;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.BillingState = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.BillingState = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 5;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.BillingPostalCode = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.BillingPostalCode = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 6;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.BillingCountry = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.BillingCountry = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 7;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.Phone = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.Phone = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 8;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.Fax = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.Fax = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 9;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.AccountNumber = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.AccountNumber = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 10;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.Website = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.Website = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 11;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.OwnerId = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.OwnerId = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 12;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
											.length() > 0) {
										try {

											row2.CreatedDate = ParserUtils
													.parseTo_Date(
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															context.dateTimeString);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1
													.setException(ex_tFileInputDelimited_1);
										}
									} else {

										row2.CreatedDate = null;

									}

								} else {
									row2.CreatedDate = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 13;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.CreatedById = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.CreatedById = null;
								}

							}

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row2 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */
						// Start of branch "row2"
						if (row2 != null) {

							/**
							 * [tJoin_1 main ] start
							 */

							currentComponent = "tJoin_1";

							row5 = null;

							row5 = new row5Struct();
							row5.Id = row2.Id;
							row5.Name = row2.Name;
							row5.BillingStreet = row2.BillingStreet;
							row5.BillingCity = row2.BillingCity;
							row5.BillingState = row2.BillingState;
							row5.BillingPostalCode = row2.BillingPostalCode;
							row5.BillingCountry = row2.BillingCountry;
							row5.Phone = row2.Phone;
							row5.Fax = row2.Fax;
							row5.AccountNumber = row2.AccountNumber;
							row5.Website = row2.Website;
							row5.OwnerId = row2.OwnerId;
							row5.CreatedDate = row2.CreatedDate;
							row5.CreatedById = row2.CreatedById;

							if (util_tJoin_1.isJoined(row2)) {
								row5.Dest_CreatedById = util_tJoin_1.lookupValue.Id;
							}

							// /////////////////////

							tos_count_tJoin_1++;

							/**
							 * [tJoin_1 main ] stop
							 */
							// Start of branch "row5"
							if (row5 != null) {

								/**
								 * [tJoin_2 main ] start
								 */

								currentComponent = "tJoin_2";

								row6 = null;

								row6 = new row6Struct();
								row6.Id = row5.Id;
								row6.Name = row5.Name;
								row6.BillingStreet = row5.BillingStreet;
								row6.BillingCity = row5.BillingCity;
								row6.BillingState = row5.BillingState;
								row6.BillingPostalCode = row5.BillingPostalCode;
								row6.BillingCountry = row5.BillingCountry;
								row6.Phone = row5.Phone;
								row6.Fax = row5.Fax;
								row6.AccountNumber = row5.AccountNumber;
								row6.Website = row5.Website;
								row6.OwnerId = row5.OwnerId;
								row6.CreatedDate = row5.CreatedDate;
								row6.CreatedById = row5.CreatedById;
								row6.Dest_CreatedById = row5.Dest_CreatedById;

								if (util_tJoin_2.isJoined(row5)) {
									row6.Dest_OwnerId = util_tJoin_2.lookupValue.Id;
								}

								// /////////////////////

								tos_count_tJoin_2++;

								/**
								 * [tJoin_2 main ] stop
								 */
								// Start of branch "row6"
								if (row6 != null) {

									/**
									 * [tJavaRow_1 main ] start
									 */

									currentComponent = "tJavaRow_1";

									row7.ExternalID__c = row6.Id;
									row7.Name = row6.Name;
									row7.BillingStreet = row6.BillingStreet;
									row7.BillingCity = row6.BillingCity;
									row7.BillingState = row6.BillingState;
									row7.BillingPostalCode = row6.BillingPostalCode;
									row7.BillingCountry = row6.BillingCountry;
									row7.Phone = row6.Phone;
									row7.Fax = row6.Fax;
									row7.AccountNumber = row6.AccountNumber;
									row7.Website = row6.Website;
									row7.OwnerId = row6.Dest_OwnerId;
									row7.CreatedDate = row6.CreatedDate;
									row7.CreatedById = row6.Dest_CreatedById;

									nb_line_tJavaRow_1++;

									tos_count_tJavaRow_1++;

									/**
									 * [tJavaRow_1 main ] stop
									 */

									/**
									 * [tFileOutputDelimited_2 main ] start
									 */

									currentComponent = "tFileOutputDelimited_2";

									String[] rowtFileOutputDelimited_2 = new String[14];
									rowtFileOutputDelimited_2[0] = row7.ExternalID__c == null ? null
											: row7.ExternalID__c;
									rowtFileOutputDelimited_2[1] = row7.Name == null ? null
											: row7.Name;
									rowtFileOutputDelimited_2[2] = row7.BillingStreet == null ? null
											: row7.BillingStreet;
									rowtFileOutputDelimited_2[3] = row7.BillingCity == null ? null
											: row7.BillingCity;
									rowtFileOutputDelimited_2[4] = row7.BillingState == null ? null
											: row7.BillingState;
									rowtFileOutputDelimited_2[5] = row7.BillingPostalCode == null ? null
											: row7.BillingPostalCode;
									rowtFileOutputDelimited_2[6] = row7.BillingCountry == null ? null
											: row7.BillingCountry;
									rowtFileOutputDelimited_2[7] = row7.Phone == null ? null
											: row7.Phone;
									rowtFileOutputDelimited_2[8] = row7.Fax == null ? null
											: row7.Fax;
									rowtFileOutputDelimited_2[9] = row7.AccountNumber == null ? null
											: row7.AccountNumber;
									rowtFileOutputDelimited_2[10] = row7.Website == null ? null
											: row7.Website;
									rowtFileOutputDelimited_2[11] = row7.OwnerId == null ? null
											: row7.OwnerId;
									rowtFileOutputDelimited_2[12] = row7.CreatedDate == null ? null
											: FormatterUtils.format_Date(
													row7.CreatedDate,
													context.dateTimeString);
									rowtFileOutputDelimited_2[13] = row7.CreatedById == null ? null
											: row7.CreatedById;
									nb_line_tFileOutputDelimited_2++;
									resourceMap.put(
											"nb_line_tFileOutputDelimited_2",
											nb_line_tFileOutputDelimited_2);
									CsvWritertFileOutputDelimited_2
											.writeNext(rowtFileOutputDelimited_2);

									tos_count_tFileOutputDelimited_2++;

									/**
									 * [tFileOutputDelimited_2 main ] stop
									 */

								} // End of branch "row6"

							} // End of branch "row5"

						} // End of branch "row2"

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						nb_line_tFileInputDelimited_1++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_1 != null) {
							csvReadertFileInputDelimited_1.close();
						}
					}
					if (csvReadertFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								nb_line_tFileInputDelimited_1);
					}

				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tJoin_1 end ] start
				 */

				currentComponent = "tJoin_1";

				ok_Hash.put("tJoin_1", true);
				end_Hash.put("tJoin_1", System.currentTimeMillis());

				/**
				 * [tJoin_1 end ] stop
				 */

				/**
				 * [tJoin_2 end ] start
				 */

				currentComponent = "tJoin_2";

				ok_Hash.put("tJoin_2", true);
				end_Hash.put("tJoin_2", System.currentTimeMillis());

				/**
				 * [tJoin_2 end ] stop
				 */

				/**
				 * [tJavaRow_1 end ] start
				 */

				currentComponent = "tJavaRow_1";

				globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);

				ok_Hash.put("tJavaRow_1", true);
				end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				/**
				 * [tJavaRow_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 end ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (CsvWritertFileOutputDelimited_2 != null) {
					CsvWritertFileOutputDelimited_2.close();
				}

				globalMap.put("tFileOutputDelimited_2_NB_LINE",
						nb_line_tFileOutputDelimited_2);

				resourceMap.put("finish_tFileOutputDelimited_2", true);

				ok_Hash.put("tFileOutputDelimited_2", true);
				end_Hash.put("tFileOutputDelimited_2",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_2 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tJoin_2"
			globalMap.remove("tHash_row4");

			// free memory for "tJoin_1"
			globalMap.remove("tHash_row3");

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tJoin_1 finally ] start
				 */

				currentComponent = "tJoin_1";

				/**
				 * [tJoin_1 finally ] stop
				 */

				/**
				 * [tJoin_2 finally ] start
				 */

				currentComponent = "tJoin_2";

				/**
				 * [tJoin_2 finally ] stop
				 */

				/**
				 * [tJavaRow_1 finally ] start
				 */

				currentComponent = "tJavaRow_1";

				/**
				 * [tJavaRow_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (resourceMap.get("finish_tFileOutputDelimited_2") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_2 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_2");

					if (CsvWritertFileOutputDelimited_2 != null) {
						CsvWritertFileOutputDelimited_2.close();
					}

				}

				/**
				 * [tFileOutputDelimited_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_2 begin ] start
				 */

				ok_Hash.put("tJava_2", false);
				start_Hash.put("tJava_2", System.currentTimeMillis());

				currentComponent = "tJava_2";

				int tos_count_tJava_2 = 0;

				System.out.println(jobName
						+ ": Source Rows: "
						+ ((Integer) globalMap
								.get("tFileInputDelimited_1_NB_LINE")));
				System.out.println(jobName
						+ ": Destination Rows: "
						+ ((Integer) globalMap
								.get("tFileOutputDelimited_2_NB_LINE")));
				System.out.println(jobName
						+ ": Creating Accounts in destination org? "
						+ context.doDML);

				/**
				 * [tJava_2 begin ] stop
				 */

				/**
				 * [tJava_2 main ] start
				 */

				currentComponent = "tJava_2";

				tos_count_tJava_2++;

				/**
				 * [tJava_2 main ] stop
				 */

				/**
				 * [tJava_2 end ] start
				 */

				currentComponent = "tJava_2";

				ok_Hash.put("tJava_2", true);
				end_Hash.put("tJava_2", System.currentTimeMillis());

				if (context.doDML) {

					tSalesforceBulkExec_1Process(globalMap);
				}

				/**
				 * [tJava_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_2 finally ] start
				 */

				currentComponent = "tJava_2";

				/**
				 * [tJava_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}

	public static class row8Struct implements
			routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_DF2019_Migrate_Accounts = new byte[0];
		static byte[] commonByteArray_DF2019_Migrate_Accounts = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ExternalID__c;

		public String getExternalID__c() {
			return this.ExternalID__c;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String BillingStreet;

		public String getBillingStreet() {
			return this.BillingStreet;
		}

		public String BillingCity;

		public String getBillingCity() {
			return this.BillingCity;
		}

		public String BillingState;

		public String getBillingState() {
			return this.BillingState;
		}

		public String BillingPostalCode;

		public String getBillingPostalCode() {
			return this.BillingPostalCode;
		}

		public String BillingCountry;

		public String getBillingCountry() {
			return this.BillingCountry;
		}

		public String Phone;

		public String getPhone() {
			return this.Phone;
		}

		public String Fax;

		public String getFax() {
			return this.Fax;
		}

		public String AccountNumber;

		public String getAccountNumber() {
			return this.AccountNumber;
		}

		public String Website;

		public String getWebsite() {
			return this.Website;
		}

		public String OwnerId;

		public String getOwnerId() {
			return this.OwnerId;
		}

		public java.util.Date CreatedDate;

		public java.util.Date getCreatedDate() {
			return this.CreatedDate;
		}

		public String CreatedById;

		public String getCreatedById() {
			return this.CreatedById;
		}

		public String salesforce_id;

		public String getSalesforce_id() {
			return this.salesforce_id;
		}

		public String salesforce_created;

		public String getSalesforce_created() {
			return this.salesforce_created;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.ExternalID__c == null) ? 0
								: this.ExternalID__c.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row8Struct other = (row8Struct) obj;

			if (this.ExternalID__c == null) {
				if (other.ExternalID__c != null)
					return false;

			} else if (!this.ExternalID__c.equals(other.ExternalID__c))

				return false;

			return true;
		}

		public void copyDataTo(row8Struct other) {

			other.ExternalID__c = this.ExternalID__c;
			other.Name = this.Name;
			other.BillingStreet = this.BillingStreet;
			other.BillingCity = this.BillingCity;
			other.BillingState = this.BillingState;
			other.BillingPostalCode = this.BillingPostalCode;
			other.BillingCountry = this.BillingCountry;
			other.Phone = this.Phone;
			other.Fax = this.Fax;
			other.AccountNumber = this.AccountNumber;
			other.Website = this.Website;
			other.OwnerId = this.OwnerId;
			other.CreatedDate = this.CreatedDate;
			other.CreatedById = this.CreatedById;
			other.salesforce_id = this.salesforce_id;
			other.salesforce_created = this.salesforce_created;

		}

		public void copyKeysDataTo(row8Struct other) {

			other.ExternalID__c = this.ExternalID__c;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DF2019_Migrate_Accounts.length) {
					if (length < 1024
							&& commonByteArray_DF2019_Migrate_Accounts.length == 0) {
						commonByteArray_DF2019_Migrate_Accounts = new byte[1024];
					} else {
						commonByteArray_DF2019_Migrate_Accounts = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DF2019_Migrate_Accounts, 0,
						length);
				strReturn = new String(commonByteArray_DF2019_Migrate_Accounts,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DF2019_Migrate_Accounts) {

				try {

					int length = 0;

					this.ExternalID__c = readString(dis);

					this.Name = readString(dis);

					this.BillingStreet = readString(dis);

					this.BillingCity = readString(dis);

					this.BillingState = readString(dis);

					this.BillingPostalCode = readString(dis);

					this.BillingCountry = readString(dis);

					this.Phone = readString(dis);

					this.Fax = readString(dis);

					this.AccountNumber = readString(dis);

					this.Website = readString(dis);

					this.OwnerId = readString(dis);

					this.CreatedDate = readDate(dis);

					this.CreatedById = readString(dis);

					this.salesforce_id = readString(dis);

					this.salesforce_created = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ExternalID__c, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.BillingStreet, dos);

				// String

				writeString(this.BillingCity, dos);

				// String

				writeString(this.BillingState, dos);

				// String

				writeString(this.BillingPostalCode, dos);

				// String

				writeString(this.BillingCountry, dos);

				// String

				writeString(this.Phone, dos);

				// String

				writeString(this.Fax, dos);

				// String

				writeString(this.AccountNumber, dos);

				// String

				writeString(this.Website, dos);

				// String

				writeString(this.OwnerId, dos);

				// java.util.Date

				writeDate(this.CreatedDate, dos);

				// String

				writeString(this.CreatedById, dos);

				// String

				writeString(this.salesforce_id, dos);

				// String

				writeString(this.salesforce_created, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ExternalID__c=" + ExternalID__c);
			sb.append(",Name=" + Name);
			sb.append(",BillingStreet=" + BillingStreet);
			sb.append(",BillingCity=" + BillingCity);
			sb.append(",BillingState=" + BillingState);
			sb.append(",BillingPostalCode=" + BillingPostalCode);
			sb.append(",BillingCountry=" + BillingCountry);
			sb.append(",Phone=" + Phone);
			sb.append(",Fax=" + Fax);
			sb.append(",AccountNumber=" + AccountNumber);
			sb.append(",Website=" + Website);
			sb.append(",OwnerId=" + OwnerId);
			sb.append(",CreatedDate=" + String.valueOf(CreatedDate));
			sb.append(",CreatedById=" + CreatedById);
			sb.append(",salesforce_id=" + salesforce_id);
			sb.append(",salesforce_created=" + salesforce_created);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ExternalID__c,
					other.ExternalID__c);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_DF2019_Migrate_Accounts = new byte[0];
		static byte[] commonByteArray_DF2019_Migrate_Accounts = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ExternalID__c;

		public String getExternalID__c() {
			return this.ExternalID__c;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String BillingStreet;

		public String getBillingStreet() {
			return this.BillingStreet;
		}

		public String BillingCity;

		public String getBillingCity() {
			return this.BillingCity;
		}

		public String BillingState;

		public String getBillingState() {
			return this.BillingState;
		}

		public String BillingPostalCode;

		public String getBillingPostalCode() {
			return this.BillingPostalCode;
		}

		public String BillingCountry;

		public String getBillingCountry() {
			return this.BillingCountry;
		}

		public String Phone;

		public String getPhone() {
			return this.Phone;
		}

		public String Fax;

		public String getFax() {
			return this.Fax;
		}

		public String AccountNumber;

		public String getAccountNumber() {
			return this.AccountNumber;
		}

		public String Website;

		public String getWebsite() {
			return this.Website;
		}

		public String OwnerId;

		public String getOwnerId() {
			return this.OwnerId;
		}

		public java.util.Date CreatedDate;

		public java.util.Date getCreatedDate() {
			return this.CreatedDate;
		}

		public String CreatedById;

		public String getCreatedById() {
			return this.CreatedById;
		}

		public String error;

		public String getError() {
			return this.error;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.ExternalID__c == null) ? 0
								: this.ExternalID__c.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row9Struct other = (row9Struct) obj;

			if (this.ExternalID__c == null) {
				if (other.ExternalID__c != null)
					return false;

			} else if (!this.ExternalID__c.equals(other.ExternalID__c))

				return false;

			return true;
		}

		public void copyDataTo(row9Struct other) {

			other.ExternalID__c = this.ExternalID__c;
			other.Name = this.Name;
			other.BillingStreet = this.BillingStreet;
			other.BillingCity = this.BillingCity;
			other.BillingState = this.BillingState;
			other.BillingPostalCode = this.BillingPostalCode;
			other.BillingCountry = this.BillingCountry;
			other.Phone = this.Phone;
			other.Fax = this.Fax;
			other.AccountNumber = this.AccountNumber;
			other.Website = this.Website;
			other.OwnerId = this.OwnerId;
			other.CreatedDate = this.CreatedDate;
			other.CreatedById = this.CreatedById;
			other.error = this.error;

		}

		public void copyKeysDataTo(row9Struct other) {

			other.ExternalID__c = this.ExternalID__c;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DF2019_Migrate_Accounts.length) {
					if (length < 1024
							&& commonByteArray_DF2019_Migrate_Accounts.length == 0) {
						commonByteArray_DF2019_Migrate_Accounts = new byte[1024];
					} else {
						commonByteArray_DF2019_Migrate_Accounts = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DF2019_Migrate_Accounts, 0,
						length);
				strReturn = new String(commonByteArray_DF2019_Migrate_Accounts,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DF2019_Migrate_Accounts) {

				try {

					int length = 0;

					this.ExternalID__c = readString(dis);

					this.Name = readString(dis);

					this.BillingStreet = readString(dis);

					this.BillingCity = readString(dis);

					this.BillingState = readString(dis);

					this.BillingPostalCode = readString(dis);

					this.BillingCountry = readString(dis);

					this.Phone = readString(dis);

					this.Fax = readString(dis);

					this.AccountNumber = readString(dis);

					this.Website = readString(dis);

					this.OwnerId = readString(dis);

					this.CreatedDate = readDate(dis);

					this.CreatedById = readString(dis);

					this.error = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ExternalID__c, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.BillingStreet, dos);

				// String

				writeString(this.BillingCity, dos);

				// String

				writeString(this.BillingState, dos);

				// String

				writeString(this.BillingPostalCode, dos);

				// String

				writeString(this.BillingCountry, dos);

				// String

				writeString(this.Phone, dos);

				// String

				writeString(this.Fax, dos);

				// String

				writeString(this.AccountNumber, dos);

				// String

				writeString(this.Website, dos);

				// String

				writeString(this.OwnerId, dos);

				// java.util.Date

				writeDate(this.CreatedDate, dos);

				// String

				writeString(this.CreatedById, dos);

				// String

				writeString(this.error, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ExternalID__c=" + ExternalID__c);
			sb.append(",Name=" + Name);
			sb.append(",BillingStreet=" + BillingStreet);
			sb.append(",BillingCity=" + BillingCity);
			sb.append(",BillingState=" + BillingState);
			sb.append(",BillingPostalCode=" + BillingPostalCode);
			sb.append(",BillingCountry=" + BillingCountry);
			sb.append(",Phone=" + Phone);
			sb.append(",Fax=" + Fax);
			sb.append(",AccountNumber=" + AccountNumber);
			sb.append(",Website=" + Website);
			sb.append(",OwnerId=" + OwnerId);
			sb.append(",CreatedDate=" + String.valueOf(CreatedDate));
			sb.append(",CreatedById=" + CreatedById);
			sb.append(",error=" + error);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ExternalID__c,
					other.ExternalID__c);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tSalesforceBulkExec_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tSalesforceBulkExec_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row8Struct row8 = new row8Struct();
				row9Struct row9 = new row9Struct();

				/**
				 * [tFileOutputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_4", false);
				start_Hash.put("tFileOutputDelimited_4",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_4";

				int tos_count_tFileOutputDelimited_4 = 0;

				String fileName_tFileOutputDelimited_4 = "";
				fileName_tFileOutputDelimited_4 = (new java.io.File(
						context.filePath
								+ "\\Output\\Dest_Accounts_Success.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_4 = null;
				String extension_tFileOutputDelimited_4 = null;
				String directory_tFileOutputDelimited_4 = null;
				if ((fileName_tFileOutputDelimited_4.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") < fileName_tFileOutputDelimited_4
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(0, fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
							.substring(0, fileName_tFileOutputDelimited_4
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(0, fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					}
					directory_tFileOutputDelimited_4 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_4 = true;
				java.io.File filetFileOutputDelimited_4 = new java.io.File(
						fileName_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME",
						fileName_tFileOutputDelimited_4);
				String[] headColutFileOutputDelimited_4 = new String[16];
				class CSVBasicSet_tFileOutputDelimited_4 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_4[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_4 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_4[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator(",");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_4[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_4 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_4[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_4[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_4 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_4[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_4 = 0;
				int splitEvery_tFileOutputDelimited_4 = 1000;
				int splitedFileNo_tFileOutputDelimited_4 = 0;
				int currentRow_tFileOutputDelimited_4 = 0;

				CSVBasicSet_tFileOutputDelimited_4 csvSettings_tFileOutputDelimited_4 = new CSVBasicSet_tFileOutputDelimited_4();
				csvSettings_tFileOutputDelimited_4.setFieldSeparator(",");
				csvSettings_tFileOutputDelimited_4.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_4.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_4 != null
						&& directory_tFileOutputDelimited_4.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_4 = new java.io.File(
							directory_tFileOutputDelimited_4);
					if (!dir_tFileOutputDelimited_4.exists()) {
						dir_tFileOutputDelimited_4.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_4 = null;

				java.io.File fileToDelete_tFileOutputDelimited_4 = new java.io.File(
						fileName_tFileOutputDelimited_4);
				if (fileToDelete_tFileOutputDelimited_4.exists()) {
					fileToDelete_tFileOutputDelimited_4.delete();
				}
				CsvWritertFileOutputDelimited_4 = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(
								new java.io.OutputStreamWriter(
										new java.io.FileOutputStream(
												fileName_tFileOutputDelimited_4,
												false), "ISO-8859-15")));
				CsvWritertFileOutputDelimited_4
						.setSeparator(csvSettings_tFileOutputDelimited_4
								.getFieldDelim());
				if (!csvSettings_tFileOutputDelimited_4
						.isUseCRLFRecordDelimiter()
						&& csvSettings_tFileOutputDelimited_4.getRowDelim() != '\r'
						&& csvSettings_tFileOutputDelimited_4.getRowDelim() != '\n') {
					CsvWritertFileOutputDelimited_4.setLineEnd(""
							+ csvSettings_tFileOutputDelimited_4.getRowDelim());
				}
				if (filetFileOutputDelimited_4.length() == 0) {
					headColutFileOutputDelimited_4[0] = "ExternalID__c";
					headColutFileOutputDelimited_4[1] = "Name";
					headColutFileOutputDelimited_4[2] = "BillingStreet";
					headColutFileOutputDelimited_4[3] = "BillingCity";
					headColutFileOutputDelimited_4[4] = "BillingState";
					headColutFileOutputDelimited_4[5] = "BillingPostalCode";
					headColutFileOutputDelimited_4[6] = "BillingCountry";
					headColutFileOutputDelimited_4[7] = "Phone";
					headColutFileOutputDelimited_4[8] = "Fax";
					headColutFileOutputDelimited_4[9] = "AccountNumber";
					headColutFileOutputDelimited_4[10] = "Website";
					headColutFileOutputDelimited_4[11] = "OwnerId";
					headColutFileOutputDelimited_4[12] = "CreatedDate";
					headColutFileOutputDelimited_4[13] = "CreatedById";
					headColutFileOutputDelimited_4[14] = "salesforce_id";
					headColutFileOutputDelimited_4[15] = "salesforce_created";
					CsvWritertFileOutputDelimited_4
							.writeNext(headColutFileOutputDelimited_4);
					CsvWritertFileOutputDelimited_4.flush();
				}
				CsvWritertFileOutputDelimited_4
						.setEscapeChar(csvSettings_tFileOutputDelimited_4
								.getEscapeChar());
				CsvWritertFileOutputDelimited_4
						.setQuoteChar(csvSettings_tFileOutputDelimited_4
								.getTextEnclosure());
				CsvWritertFileOutputDelimited_4
						.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

				resourceMap.put("CsvWriter_tFileOutputDelimited_4",
						CsvWritertFileOutputDelimited_4);
				resourceMap.put("nb_line_tFileOutputDelimited_4",
						nb_line_tFileOutputDelimited_4);

				/**
				 * [tFileOutputDelimited_4 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_3", false);
				start_Hash.put("tFileOutputDelimited_3",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_3";

				int tos_count_tFileOutputDelimited_3 = 0;

				String fileName_tFileOutputDelimited_3 = "";
				fileName_tFileOutputDelimited_3 = (new java.io.File(
						context.filePath + "\\Output\\Dest_Accounts_Fail.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_3 = null;
				String extension_tFileOutputDelimited_3 = null;
				String directory_tFileOutputDelimited_3 = null;
				if ((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(0, fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
							.substring(0, fileName_tFileOutputDelimited_3
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(0, fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					}
					directory_tFileOutputDelimited_3 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_3 = true;
				java.io.File filetFileOutputDelimited_3 = new java.io.File(
						fileName_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME",
						fileName_tFileOutputDelimited_3);
				String[] headColutFileOutputDelimited_3 = new String[15];
				class CSVBasicSet_tFileOutputDelimited_3 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_3[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_3 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_3[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator(",");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_3[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_3 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_3[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_3[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_3 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_3[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_3 = 0;
				int splitEvery_tFileOutputDelimited_3 = 1000;
				int splitedFileNo_tFileOutputDelimited_3 = 0;
				int currentRow_tFileOutputDelimited_3 = 0;

				CSVBasicSet_tFileOutputDelimited_3 csvSettings_tFileOutputDelimited_3 = new CSVBasicSet_tFileOutputDelimited_3();
				csvSettings_tFileOutputDelimited_3.setFieldSeparator(",");
				csvSettings_tFileOutputDelimited_3.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_3.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_3 != null
						&& directory_tFileOutputDelimited_3.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_3 = new java.io.File(
							directory_tFileOutputDelimited_3);
					if (!dir_tFileOutputDelimited_3.exists()) {
						dir_tFileOutputDelimited_3.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_3 = null;

				java.io.File fileToDelete_tFileOutputDelimited_3 = new java.io.File(
						fileName_tFileOutputDelimited_3);
				if (fileToDelete_tFileOutputDelimited_3.exists()) {
					fileToDelete_tFileOutputDelimited_3.delete();
				}
				CsvWritertFileOutputDelimited_3 = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(
								new java.io.OutputStreamWriter(
										new java.io.FileOutputStream(
												fileName_tFileOutputDelimited_3,
												false), "ISO-8859-15")));
				CsvWritertFileOutputDelimited_3
						.setSeparator(csvSettings_tFileOutputDelimited_3
								.getFieldDelim());
				if (!csvSettings_tFileOutputDelimited_3
						.isUseCRLFRecordDelimiter()
						&& csvSettings_tFileOutputDelimited_3.getRowDelim() != '\r'
						&& csvSettings_tFileOutputDelimited_3.getRowDelim() != '\n') {
					CsvWritertFileOutputDelimited_3.setLineEnd(""
							+ csvSettings_tFileOutputDelimited_3.getRowDelim());
				}
				if (filetFileOutputDelimited_3.length() == 0) {
					headColutFileOutputDelimited_3[0] = "ExternalID__c";
					headColutFileOutputDelimited_3[1] = "Name";
					headColutFileOutputDelimited_3[2] = "BillingStreet";
					headColutFileOutputDelimited_3[3] = "BillingCity";
					headColutFileOutputDelimited_3[4] = "BillingState";
					headColutFileOutputDelimited_3[5] = "BillingPostalCode";
					headColutFileOutputDelimited_3[6] = "BillingCountry";
					headColutFileOutputDelimited_3[7] = "Phone";
					headColutFileOutputDelimited_3[8] = "Fax";
					headColutFileOutputDelimited_3[9] = "AccountNumber";
					headColutFileOutputDelimited_3[10] = "Website";
					headColutFileOutputDelimited_3[11] = "OwnerId";
					headColutFileOutputDelimited_3[12] = "CreatedDate";
					headColutFileOutputDelimited_3[13] = "CreatedById";
					headColutFileOutputDelimited_3[14] = "error";
					CsvWritertFileOutputDelimited_3
							.writeNext(headColutFileOutputDelimited_3);
					CsvWritertFileOutputDelimited_3.flush();
				}
				CsvWritertFileOutputDelimited_3
						.setEscapeChar(csvSettings_tFileOutputDelimited_3
								.getEscapeChar());
				CsvWritertFileOutputDelimited_3
						.setQuoteChar(csvSettings_tFileOutputDelimited_3
								.getTextEnclosure());
				CsvWritertFileOutputDelimited_3
						.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

				resourceMap.put("CsvWriter_tFileOutputDelimited_3",
						CsvWritertFileOutputDelimited_3);
				resourceMap.put("nb_line_tFileOutputDelimited_3",
						nb_line_tFileOutputDelimited_3);

				/**
				 * [tFileOutputDelimited_3 begin ] stop
				 */

				/**
				 * [tSalesforceBulkExec_1 begin ] start
				 */

				ok_Hash.put("tSalesforceBulkExec_1", false);
				start_Hash.put("tSalesforceBulkExec_1",
						System.currentTimeMillis());

				currentComponent = "tSalesforceBulkExec_1";

				int tos_count_tSalesforceBulkExec_1 = 0;

				int nb_line_tSalesforceBulkExec_1 = 0;
				int nb_success_tSalesforceBulkExec_1 = 0;
				int nb_reject_tSalesforceBulkExec_1 = 0;
				System.setProperty("org.apache.commons.logging.Log",
						"org.apache.commons.logging.impl.NoOpLog");

				org.talend.salesforceBulk.SforceBulkConnection sforceConn_tSalesforceBulkExec_1 = null;

				if (globalMap.get("conn_tSalesforceConnection_2") == null) {
					throw new RuntimeException(
							"Get null connection from tSalesforceConnection_2");
				}
				sforceConn_tSalesforceBulkExec_1 = (org.talend.salesforceBulk.SforceBulkConnection) globalMap
						.get("conn_tSalesforceConnection_2");

				org.talend.salesforceBulk.SalesforceBulkAPI sforceBulk_tSalesforceBulkExec_1 = new org.talend.salesforceBulk.SalesforceBulkAPI(
						sforceConn_tSalesforceBulkExec_1);
				sforceBulk_tSalesforceBulkExec_1.setConcurrencyMode("Parallel");
				sforceBulk_tSalesforceBulkExec_1.setAwaitTime(10000);

				sforceBulk_tSalesforceBulkExec_1.executeBulk("Account",
						"upsert", "ExternalID__c", "csv", context.filePath
								+ "\\Output\\Dest_AccountsToUpsert.csv",
						10 * 1024 * 1024, 10000);

				int j_tSalesforceBulkExec_1 = 0;
				int batchCount_tSalesforceBulkExec_1 = sforceBulk_tSalesforceBulkExec_1
						.getBatchCount();
				for (int i = 0; i < batchCount_tSalesforceBulkExec_1; i++) {
					java.util.List<java.util.Map<String, String>> resultListMessage_tSalesforceBulkExec_1 = sforceBulk_tSalesforceBulkExec_1
							.getBatchLog(i);
					for (java.util.Map<String, String> resultMessage_tSalesforceBulkExec_1 : resultListMessage_tSalesforceBulkExec_1) {
						j_tSalesforceBulkExec_1++;
						nb_line_tSalesforceBulkExec_1++;

						row9 = null;

						row8 = null;

						if ("true".equals(resultMessage_tSalesforceBulkExec_1
								.get("Success"))) {
							nb_success_tSalesforceBulkExec_1++;

							row8 = new row8Struct();

							row8.salesforce_created = resultMessage_tSalesforceBulkExec_1
									.get("Created");
							row8.salesforce_id = resultMessage_tSalesforceBulkExec_1
									.get("Id");

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_1
													.get("ExternalID__c")))) {
								resultMessage_tSalesforceBulkExec_1.put(
										"ExternalID__c", null);
							}

							row8.ExternalID__c = resultMessage_tSalesforceBulkExec_1
									.get("ExternalID__c");

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_1
													.get("Name")))) {
								resultMessage_tSalesforceBulkExec_1.put("Name",
										null);
							}

							row8.Name = resultMessage_tSalesforceBulkExec_1
									.get("Name");

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_1
													.get("BillingStreet")))) {
								resultMessage_tSalesforceBulkExec_1.put(
										"BillingStreet", null);
							}

							row8.BillingStreet = resultMessage_tSalesforceBulkExec_1
									.get("BillingStreet");

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_1
													.get("BillingCity")))) {
								resultMessage_tSalesforceBulkExec_1.put(
										"BillingCity", null);
							}

							row8.BillingCity = resultMessage_tSalesforceBulkExec_1
									.get("BillingCity");

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_1
													.get("BillingState")))) {
								resultMessage_tSalesforceBulkExec_1.put(
										"BillingState", null);
							}

							row8.BillingState = resultMessage_tSalesforceBulkExec_1
									.get("BillingState");

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_1
													.get("BillingPostalCode")))) {
								resultMessage_tSalesforceBulkExec_1.put(
										"BillingPostalCode", null);
							}

							row8.BillingPostalCode = resultMessage_tSalesforceBulkExec_1
									.get("BillingPostalCode");

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_1
													.get("BillingCountry")))) {
								resultMessage_tSalesforceBulkExec_1.put(
										"BillingCountry", null);
							}

							row8.BillingCountry = resultMessage_tSalesforceBulkExec_1
									.get("BillingCountry");

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_1
													.get("Phone")))) {
								resultMessage_tSalesforceBulkExec_1.put(
										"Phone", null);
							}

							row8.Phone = resultMessage_tSalesforceBulkExec_1
									.get("Phone");

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_1
													.get("Fax")))) {
								resultMessage_tSalesforceBulkExec_1.put("Fax",
										null);
							}

							row8.Fax = resultMessage_tSalesforceBulkExec_1
									.get("Fax");

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_1
													.get("AccountNumber")))) {
								resultMessage_tSalesforceBulkExec_1.put(
										"AccountNumber", null);
							}

							row8.AccountNumber = resultMessage_tSalesforceBulkExec_1
									.get("AccountNumber");

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_1
													.get("Website")))) {
								resultMessage_tSalesforceBulkExec_1.put(
										"Website", null);
							}

							row8.Website = resultMessage_tSalesforceBulkExec_1
									.get("Website");

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_1
													.get("OwnerId")))) {
								resultMessage_tSalesforceBulkExec_1.put(
										"OwnerId", null);
							}

							row8.OwnerId = resultMessage_tSalesforceBulkExec_1
									.get("OwnerId");

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_1
													.get("CreatedDate")))) {
								resultMessage_tSalesforceBulkExec_1.put(
										"CreatedDate", null);
							}

							row8.CreatedDate = ParserUtils.parseTo_Date(
									resultMessage_tSalesforceBulkExec_1
											.get("CreatedDate"),
									context.dateTimeString);

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_1
													.get("CreatedById")))) {
								resultMessage_tSalesforceBulkExec_1.put(
										"CreatedById", null);
							}

							row8.CreatedById = resultMessage_tSalesforceBulkExec_1
									.get("CreatedById");

						} else {
							nb_reject_tSalesforceBulkExec_1++;

							row9 = new row9Struct();
							row9.error = resultMessage_tSalesforceBulkExec_1
									.get("Error");

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_1
													.get("ExternalID__c")))) {
								resultMessage_tSalesforceBulkExec_1.put(
										"ExternalID__c", null);
							}

							row9.ExternalID__c = resultMessage_tSalesforceBulkExec_1
									.get("ExternalID__c");

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_1
													.get("Name")))) {
								resultMessage_tSalesforceBulkExec_1.put("Name",
										null);
							}

							row9.Name = resultMessage_tSalesforceBulkExec_1
									.get("Name");

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_1
													.get("BillingStreet")))) {
								resultMessage_tSalesforceBulkExec_1.put(
										"BillingStreet", null);
							}

							row9.BillingStreet = resultMessage_tSalesforceBulkExec_1
									.get("BillingStreet");

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_1
													.get("BillingCity")))) {
								resultMessage_tSalesforceBulkExec_1.put(
										"BillingCity", null);
							}

							row9.BillingCity = resultMessage_tSalesforceBulkExec_1
									.get("BillingCity");

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_1
													.get("BillingState")))) {
								resultMessage_tSalesforceBulkExec_1.put(
										"BillingState", null);
							}

							row9.BillingState = resultMessage_tSalesforceBulkExec_1
									.get("BillingState");

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_1
													.get("BillingPostalCode")))) {
								resultMessage_tSalesforceBulkExec_1.put(
										"BillingPostalCode", null);
							}

							row9.BillingPostalCode = resultMessage_tSalesforceBulkExec_1
									.get("BillingPostalCode");

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_1
													.get("BillingCountry")))) {
								resultMessage_tSalesforceBulkExec_1.put(
										"BillingCountry", null);
							}

							row9.BillingCountry = resultMessage_tSalesforceBulkExec_1
									.get("BillingCountry");

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_1
													.get("Phone")))) {
								resultMessage_tSalesforceBulkExec_1.put(
										"Phone", null);
							}

							row9.Phone = resultMessage_tSalesforceBulkExec_1
									.get("Phone");

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_1
													.get("Fax")))) {
								resultMessage_tSalesforceBulkExec_1.put("Fax",
										null);
							}

							row9.Fax = resultMessage_tSalesforceBulkExec_1
									.get("Fax");

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_1
													.get("AccountNumber")))) {
								resultMessage_tSalesforceBulkExec_1.put(
										"AccountNumber", null);
							}

							row9.AccountNumber = resultMessage_tSalesforceBulkExec_1
									.get("AccountNumber");

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_1
													.get("Website")))) {
								resultMessage_tSalesforceBulkExec_1.put(
										"Website", null);
							}

							row9.Website = resultMessage_tSalesforceBulkExec_1
									.get("Website");

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_1
													.get("OwnerId")))) {
								resultMessage_tSalesforceBulkExec_1.put(
										"OwnerId", null);
							}

							row9.OwnerId = resultMessage_tSalesforceBulkExec_1
									.get("OwnerId");

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_1
													.get("CreatedDate")))) {
								resultMessage_tSalesforceBulkExec_1.put(
										"CreatedDate", null);
							}

							row9.CreatedDate = ParserUtils.parseTo_Date(
									resultMessage_tSalesforceBulkExec_1
											.get("CreatedDate"),
									context.dateTimeString);

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_1
													.get("CreatedById")))) {
								resultMessage_tSalesforceBulkExec_1.put(
										"CreatedById", null);
							}

							row9.CreatedById = resultMessage_tSalesforceBulkExec_1
									.get("CreatedById");

						}

						/**
						 * [tSalesforceBulkExec_1 begin ] stop
						 */

						/**
						 * [tSalesforceBulkExec_1 main ] start
						 */

						currentComponent = "tSalesforceBulkExec_1";

						tos_count_tSalesforceBulkExec_1++;

						/**
						 * [tSalesforceBulkExec_1 main ] stop
						 */
						// Start of branch "row8"
						if (row8 != null) {

							/**
							 * [tFileOutputDelimited_4 main ] start
							 */

							currentComponent = "tFileOutputDelimited_4";

							String[] rowtFileOutputDelimited_4 = new String[16];
							rowtFileOutputDelimited_4[0] = row8.ExternalID__c == null ? null
									: row8.ExternalID__c;
							rowtFileOutputDelimited_4[1] = row8.Name == null ? null
									: row8.Name;
							rowtFileOutputDelimited_4[2] = row8.BillingStreet == null ? null
									: row8.BillingStreet;
							rowtFileOutputDelimited_4[3] = row8.BillingCity == null ? null
									: row8.BillingCity;
							rowtFileOutputDelimited_4[4] = row8.BillingState == null ? null
									: row8.BillingState;
							rowtFileOutputDelimited_4[5] = row8.BillingPostalCode == null ? null
									: row8.BillingPostalCode;
							rowtFileOutputDelimited_4[6] = row8.BillingCountry == null ? null
									: row8.BillingCountry;
							rowtFileOutputDelimited_4[7] = row8.Phone == null ? null
									: row8.Phone;
							rowtFileOutputDelimited_4[8] = row8.Fax == null ? null
									: row8.Fax;
							rowtFileOutputDelimited_4[9] = row8.AccountNumber == null ? null
									: row8.AccountNumber;
							rowtFileOutputDelimited_4[10] = row8.Website == null ? null
									: row8.Website;
							rowtFileOutputDelimited_4[11] = row8.OwnerId == null ? null
									: row8.OwnerId;
							rowtFileOutputDelimited_4[12] = row8.CreatedDate == null ? null
									: FormatterUtils.format_Date(
											row8.CreatedDate,
											context.dateTimeString);
							rowtFileOutputDelimited_4[13] = row8.CreatedById == null ? null
									: row8.CreatedById;
							rowtFileOutputDelimited_4[14] = row8.salesforce_id == null ? null
									: row8.salesforce_id;
							rowtFileOutputDelimited_4[15] = row8.salesforce_created == null ? null
									: row8.salesforce_created;
							nb_line_tFileOutputDelimited_4++;
							resourceMap.put("nb_line_tFileOutputDelimited_4",
									nb_line_tFileOutputDelimited_4);
							CsvWritertFileOutputDelimited_4
									.writeNext(rowtFileOutputDelimited_4);

							tos_count_tFileOutputDelimited_4++;

							/**
							 * [tFileOutputDelimited_4 main ] stop
							 */

						} // End of branch "row8"

						// Start of branch "row9"
						if (row9 != null) {

							/**
							 * [tFileOutputDelimited_3 main ] start
							 */

							currentComponent = "tFileOutputDelimited_3";

							String[] rowtFileOutputDelimited_3 = new String[15];
							rowtFileOutputDelimited_3[0] = row9.ExternalID__c == null ? null
									: row9.ExternalID__c;
							rowtFileOutputDelimited_3[1] = row9.Name == null ? null
									: row9.Name;
							rowtFileOutputDelimited_3[2] = row9.BillingStreet == null ? null
									: row9.BillingStreet;
							rowtFileOutputDelimited_3[3] = row9.BillingCity == null ? null
									: row9.BillingCity;
							rowtFileOutputDelimited_3[4] = row9.BillingState == null ? null
									: row9.BillingState;
							rowtFileOutputDelimited_3[5] = row9.BillingPostalCode == null ? null
									: row9.BillingPostalCode;
							rowtFileOutputDelimited_3[6] = row9.BillingCountry == null ? null
									: row9.BillingCountry;
							rowtFileOutputDelimited_3[7] = row9.Phone == null ? null
									: row9.Phone;
							rowtFileOutputDelimited_3[8] = row9.Fax == null ? null
									: row9.Fax;
							rowtFileOutputDelimited_3[9] = row9.AccountNumber == null ? null
									: row9.AccountNumber;
							rowtFileOutputDelimited_3[10] = row9.Website == null ? null
									: row9.Website;
							rowtFileOutputDelimited_3[11] = row9.OwnerId == null ? null
									: row9.OwnerId;
							rowtFileOutputDelimited_3[12] = row9.CreatedDate == null ? null
									: FormatterUtils.format_Date(
											row9.CreatedDate,
											context.dateTimeString);
							rowtFileOutputDelimited_3[13] = row9.CreatedById == null ? null
									: row9.CreatedById;
							rowtFileOutputDelimited_3[14] = row9.error == null ? null
									: row9.error;
							nb_line_tFileOutputDelimited_3++;
							resourceMap.put("nb_line_tFileOutputDelimited_3",
									nb_line_tFileOutputDelimited_3);
							CsvWritertFileOutputDelimited_3
									.writeNext(rowtFileOutputDelimited_3);

							tos_count_tFileOutputDelimited_3++;

							/**
							 * [tFileOutputDelimited_3 main ] stop
							 */

						} // End of branch "row9"

						/**
						 * [tSalesforceBulkExec_1 end ] start
						 */

						currentComponent = "tSalesforceBulkExec_1";

					}
				}
				sforceBulk_tSalesforceBulkExec_1.closeFileRead();
				globalMap.put("tSalesforceBulkExec_1_NB_LINE",
						nb_line_tSalesforceBulkExec_1);
				globalMap.put("tSalesforceBulkExec_1_NB_SUCCESS",
						nb_success_tSalesforceBulkExec_1);
				globalMap.put("tSalesforceBulkExec_1_NB_REJECT",
						nb_reject_tSalesforceBulkExec_1);

				ok_Hash.put("tSalesforceBulkExec_1", true);
				end_Hash.put("tSalesforceBulkExec_1",
						System.currentTimeMillis());

				/**
				 * [tSalesforceBulkExec_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 end ] start
				 */

				currentComponent = "tFileOutputDelimited_4";

				if (CsvWritertFileOutputDelimited_4 != null) {
					CsvWritertFileOutputDelimited_4.close();
				}

				globalMap.put("tFileOutputDelimited_4_NB_LINE",
						nb_line_tFileOutputDelimited_4);

				resourceMap.put("finish_tFileOutputDelimited_4", true);

				ok_Hash.put("tFileOutputDelimited_4", true);
				end_Hash.put("tFileOutputDelimited_4",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_4 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 end ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (CsvWritertFileOutputDelimited_3 != null) {
					CsvWritertFileOutputDelimited_3.close();
				}

				globalMap.put("tFileOutputDelimited_3_NB_LINE",
						nb_line_tFileOutputDelimited_3);

				resourceMap.put("finish_tFileOutputDelimited_3", true);

				ok_Hash.put("tFileOutputDelimited_3", true);
				end_Hash.put("tFileOutputDelimited_3",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_3 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tSalesforceBulkExec_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_3Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tSalesforceBulkExec_1 finally ] start
				 */

				currentComponent = "tSalesforceBulkExec_1";

				/**
				 * [tSalesforceBulkExec_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_4";

				if (resourceMap.get("finish_tFileOutputDelimited_4") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_4 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_4");

					if (CsvWritertFileOutputDelimited_4 != null) {
						CsvWritertFileOutputDelimited_4.close();
					}

				}

				/**
				 * [tFileOutputDelimited_4 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (resourceMap.get("finish_tFileOutputDelimited_3") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_3 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_3");

					if (CsvWritertFileOutputDelimited_3 != null) {
						CsvWritertFileOutputDelimited_3.close();
					}

				}

				/**
				 * [tFileOutputDelimited_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tSalesforceBulkExec_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_3 begin ] start
				 */

				ok_Hash.put("tJava_3", false);
				start_Hash.put("tJava_3", System.currentTimeMillis());

				currentComponent = "tJava_3";

				int tos_count_tJava_3 = 0;

				System.out.println(jobName + ": Created Accounts");
				System.out
						.println(jobName
								+ ": Fail Rows: "
								+ ((Integer) globalMap
										.get("tFileOutputDelimited_3_NB_LINE"))
								+ " Success Rows: "
								+ ((Integer) globalMap
										.get("tFileOutputDelimited_4_NB_LINE"))
								+ " Total: "
								+ (((Integer) globalMap
										.get("tFileOutputDelimited_3_NB_LINE")) + ((Integer) globalMap
										.get("tFileOutputDelimited_4_NB_LINE"))));

				/**
				 * [tJava_3 begin ] stop
				 */

				/**
				 * [tJava_3 main ] start
				 */

				currentComponent = "tJava_3";

				tos_count_tJava_3++;

				/**
				 * [tJava_3 main ] stop
				 */

				/**
				 * [tJava_3 end ] start
				 */

				currentComponent = "tJava_3";

				ok_Hash.put("tJava_3", true);
				end_Hash.put("tJava_3", System.currentTimeMillis());

				/**
				 * [tJava_3 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_3:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputDelimited_4Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_3 finally ] start
				 */

				currentComponent = "tJava_3";

				/**
				 * [tJava_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}

	public static class row11Struct implements
			routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_DF2019_Migrate_Accounts = new byte[0];
		static byte[] commonByteArray_DF2019_Migrate_Accounts = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ExternalID__c;

		public String getExternalID__c() {
			return this.ExternalID__c;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String BillingStreet;

		public String getBillingStreet() {
			return this.BillingStreet;
		}

		public String BillingCity;

		public String getBillingCity() {
			return this.BillingCity;
		}

		public String BillingState;

		public String getBillingState() {
			return this.BillingState;
		}

		public String BillingPostalCode;

		public String getBillingPostalCode() {
			return this.BillingPostalCode;
		}

		public String BillingCountry;

		public String getBillingCountry() {
			return this.BillingCountry;
		}

		public String Phone;

		public String getPhone() {
			return this.Phone;
		}

		public String Fax;

		public String getFax() {
			return this.Fax;
		}

		public String AccountNumber;

		public String getAccountNumber() {
			return this.AccountNumber;
		}

		public String Website;

		public String getWebsite() {
			return this.Website;
		}

		public String OwnerId;

		public String getOwnerId() {
			return this.OwnerId;
		}

		public java.util.Date CreatedDate;

		public java.util.Date getCreatedDate() {
			return this.CreatedDate;
		}

		public String CreatedById;

		public String getCreatedById() {
			return this.CreatedById;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.ExternalID__c == null) ? 0
								: this.ExternalID__c.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row11Struct other = (row11Struct) obj;

			if (this.ExternalID__c == null) {
				if (other.ExternalID__c != null)
					return false;

			} else if (!this.ExternalID__c.equals(other.ExternalID__c))

				return false;

			return true;
		}

		public void copyDataTo(row11Struct other) {

			other.ExternalID__c = this.ExternalID__c;
			other.Name = this.Name;
			other.BillingStreet = this.BillingStreet;
			other.BillingCity = this.BillingCity;
			other.BillingState = this.BillingState;
			other.BillingPostalCode = this.BillingPostalCode;
			other.BillingCountry = this.BillingCountry;
			other.Phone = this.Phone;
			other.Fax = this.Fax;
			other.AccountNumber = this.AccountNumber;
			other.Website = this.Website;
			other.OwnerId = this.OwnerId;
			other.CreatedDate = this.CreatedDate;
			other.CreatedById = this.CreatedById;

		}

		public void copyKeysDataTo(row11Struct other) {

			other.ExternalID__c = this.ExternalID__c;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DF2019_Migrate_Accounts.length) {
					if (length < 1024
							&& commonByteArray_DF2019_Migrate_Accounts.length == 0) {
						commonByteArray_DF2019_Migrate_Accounts = new byte[1024];
					} else {
						commonByteArray_DF2019_Migrate_Accounts = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DF2019_Migrate_Accounts, 0,
						length);
				strReturn = new String(commonByteArray_DF2019_Migrate_Accounts,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DF2019_Migrate_Accounts) {

				try {

					int length = 0;

					this.ExternalID__c = readString(dis);

					this.Name = readString(dis);

					this.BillingStreet = readString(dis);

					this.BillingCity = readString(dis);

					this.BillingState = readString(dis);

					this.BillingPostalCode = readString(dis);

					this.BillingCountry = readString(dis);

					this.Phone = readString(dis);

					this.Fax = readString(dis);

					this.AccountNumber = readString(dis);

					this.Website = readString(dis);

					this.OwnerId = readString(dis);

					this.CreatedDate = readDate(dis);

					this.CreatedById = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ExternalID__c, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.BillingStreet, dos);

				// String

				writeString(this.BillingCity, dos);

				// String

				writeString(this.BillingState, dos);

				// String

				writeString(this.BillingPostalCode, dos);

				// String

				writeString(this.BillingCountry, dos);

				// String

				writeString(this.Phone, dos);

				// String

				writeString(this.Fax, dos);

				// String

				writeString(this.AccountNumber, dos);

				// String

				writeString(this.Website, dos);

				// String

				writeString(this.OwnerId, dos);

				// java.util.Date

				writeDate(this.CreatedDate, dos);

				// String

				writeString(this.CreatedById, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ExternalID__c=" + ExternalID__c);
			sb.append(",Name=" + Name);
			sb.append(",BillingStreet=" + BillingStreet);
			sb.append(",BillingCity=" + BillingCity);
			sb.append(",BillingState=" + BillingState);
			sb.append(",BillingPostalCode=" + BillingPostalCode);
			sb.append(",BillingCountry=" + BillingCountry);
			sb.append(",Phone=" + Phone);
			sb.append(",Fax=" + Fax);
			sb.append(",AccountNumber=" + AccountNumber);
			sb.append(",Website=" + Website);
			sb.append(",OwnerId=" + OwnerId);
			sb.append(",CreatedDate=" + String.valueOf(CreatedDate));
			sb.append(",CreatedById=" + CreatedById);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ExternalID__c,
					other.ExternalID__c);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements
			routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_DF2019_Migrate_Accounts = new byte[0];
		static byte[] commonByteArray_DF2019_Migrate_Accounts = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ExternalID__c;

		public String getExternalID__c() {
			return this.ExternalID__c;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String BillingStreet;

		public String getBillingStreet() {
			return this.BillingStreet;
		}

		public String BillingCity;

		public String getBillingCity() {
			return this.BillingCity;
		}

		public String BillingState;

		public String getBillingState() {
			return this.BillingState;
		}

		public String BillingPostalCode;

		public String getBillingPostalCode() {
			return this.BillingPostalCode;
		}

		public String BillingCountry;

		public String getBillingCountry() {
			return this.BillingCountry;
		}

		public String Phone;

		public String getPhone() {
			return this.Phone;
		}

		public String Fax;

		public String getFax() {
			return this.Fax;
		}

		public String AccountNumber;

		public String getAccountNumber() {
			return this.AccountNumber;
		}

		public String Website;

		public String getWebsite() {
			return this.Website;
		}

		public String OwnerId;

		public String getOwnerId() {
			return this.OwnerId;
		}

		public java.util.Date CreatedDate;

		public java.util.Date getCreatedDate() {
			return this.CreatedDate;
		}

		public String CreatedById;

		public String getCreatedById() {
			return this.CreatedById;
		}

		public String error;

		public String getError() {
			return this.error;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.ExternalID__c == null) ? 0
								: this.ExternalID__c.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row10Struct other = (row10Struct) obj;

			if (this.ExternalID__c == null) {
				if (other.ExternalID__c != null)
					return false;

			} else if (!this.ExternalID__c.equals(other.ExternalID__c))

				return false;

			return true;
		}

		public void copyDataTo(row10Struct other) {

			other.ExternalID__c = this.ExternalID__c;
			other.Name = this.Name;
			other.BillingStreet = this.BillingStreet;
			other.BillingCity = this.BillingCity;
			other.BillingState = this.BillingState;
			other.BillingPostalCode = this.BillingPostalCode;
			other.BillingCountry = this.BillingCountry;
			other.Phone = this.Phone;
			other.Fax = this.Fax;
			other.AccountNumber = this.AccountNumber;
			other.Website = this.Website;
			other.OwnerId = this.OwnerId;
			other.CreatedDate = this.CreatedDate;
			other.CreatedById = this.CreatedById;
			other.error = this.error;

		}

		public void copyKeysDataTo(row10Struct other) {

			other.ExternalID__c = this.ExternalID__c;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DF2019_Migrate_Accounts.length) {
					if (length < 1024
							&& commonByteArray_DF2019_Migrate_Accounts.length == 0) {
						commonByteArray_DF2019_Migrate_Accounts = new byte[1024];
					} else {
						commonByteArray_DF2019_Migrate_Accounts = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DF2019_Migrate_Accounts, 0,
						length);
				strReturn = new String(commonByteArray_DF2019_Migrate_Accounts,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DF2019_Migrate_Accounts) {

				try {

					int length = 0;

					this.ExternalID__c = readString(dis);

					this.Name = readString(dis);

					this.BillingStreet = readString(dis);

					this.BillingCity = readString(dis);

					this.BillingState = readString(dis);

					this.BillingPostalCode = readString(dis);

					this.BillingCountry = readString(dis);

					this.Phone = readString(dis);

					this.Fax = readString(dis);

					this.AccountNumber = readString(dis);

					this.Website = readString(dis);

					this.OwnerId = readString(dis);

					this.CreatedDate = readDate(dis);

					this.CreatedById = readString(dis);

					this.error = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ExternalID__c, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.BillingStreet, dos);

				// String

				writeString(this.BillingCity, dos);

				// String

				writeString(this.BillingState, dos);

				// String

				writeString(this.BillingPostalCode, dos);

				// String

				writeString(this.BillingCountry, dos);

				// String

				writeString(this.Phone, dos);

				// String

				writeString(this.Fax, dos);

				// String

				writeString(this.AccountNumber, dos);

				// String

				writeString(this.Website, dos);

				// String

				writeString(this.OwnerId, dos);

				// java.util.Date

				writeDate(this.CreatedDate, dos);

				// String

				writeString(this.CreatedById, dos);

				// String

				writeString(this.error, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ExternalID__c=" + ExternalID__c);
			sb.append(",Name=" + Name);
			sb.append(",BillingStreet=" + BillingStreet);
			sb.append(",BillingCity=" + BillingCity);
			sb.append(",BillingState=" + BillingState);
			sb.append(",BillingPostalCode=" + BillingPostalCode);
			sb.append(",BillingCountry=" + BillingCountry);
			sb.append(",Phone=" + Phone);
			sb.append(",Fax=" + Fax);
			sb.append(",AccountNumber=" + AccountNumber);
			sb.append(",Website=" + Website);
			sb.append(",OwnerId=" + OwnerId);
			sb.append(",CreatedDate=" + String.valueOf(CreatedDate));
			sb.append(",CreatedById=" + CreatedById);
			sb.append(",error=" + error);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ExternalID__c,
					other.ExternalID__c);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row10Struct row10 = new row10Struct();
				row11Struct row11 = new row11Struct();

				/**
				 * [tFileOutputDelimited_5 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_5", false);
				start_Hash.put("tFileOutputDelimited_5",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_5";

				int tos_count_tFileOutputDelimited_5 = 0;

				String fileName_tFileOutputDelimited_5 = "";
				fileName_tFileOutputDelimited_5 = (new java.io.File(
						context.filePath + "\\Output\\Dest_Accounts_Retry.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_5 = null;
				String extension_tFileOutputDelimited_5 = null;
				String directory_tFileOutputDelimited_5 = null;
				if ((fileName_tFileOutputDelimited_5.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_5.lastIndexOf(".") < fileName_tFileOutputDelimited_5
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
						extension_tFileOutputDelimited_5 = "";
					} else {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(0, fileName_tFileOutputDelimited_5
										.lastIndexOf("."));
						extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(fileName_tFileOutputDelimited_5
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
							.substring(0, fileName_tFileOutputDelimited_5
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_5.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(0, fileName_tFileOutputDelimited_5
										.lastIndexOf("."));
						extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(fileName_tFileOutputDelimited_5
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
						extension_tFileOutputDelimited_5 = "";
					}
					directory_tFileOutputDelimited_5 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_5 = true;
				java.io.File filetFileOutputDelimited_5 = new java.io.File(
						fileName_tFileOutputDelimited_5);
				globalMap.put("tFileOutputDelimited_5_FILE_NAME",
						fileName_tFileOutputDelimited_5);
				String[] headColutFileOutputDelimited_5 = new String[14];
				class CSVBasicSet_tFileOutputDelimited_5 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_5[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_5 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_5[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator(",");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_5[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_5 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_5[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_5[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_5 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_5[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_5 = 0;
				int splitEvery_tFileOutputDelimited_5 = 1000;
				int splitedFileNo_tFileOutputDelimited_5 = 0;
				int currentRow_tFileOutputDelimited_5 = 0;

				CSVBasicSet_tFileOutputDelimited_5 csvSettings_tFileOutputDelimited_5 = new CSVBasicSet_tFileOutputDelimited_5();
				csvSettings_tFileOutputDelimited_5.setFieldSeparator(",");
				csvSettings_tFileOutputDelimited_5.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_5.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_5 != null
						&& directory_tFileOutputDelimited_5.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_5 = new java.io.File(
							directory_tFileOutputDelimited_5);
					if (!dir_tFileOutputDelimited_5.exists()) {
						dir_tFileOutputDelimited_5.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_5 = null;

				java.io.File fileToDelete_tFileOutputDelimited_5 = new java.io.File(
						fileName_tFileOutputDelimited_5);
				if (fileToDelete_tFileOutputDelimited_5.exists()) {
					fileToDelete_tFileOutputDelimited_5.delete();
				}
				CsvWritertFileOutputDelimited_5 = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(
								new java.io.OutputStreamWriter(
										new java.io.FileOutputStream(
												fileName_tFileOutputDelimited_5,
												false), "ISO-8859-15")));
				CsvWritertFileOutputDelimited_5
						.setSeparator(csvSettings_tFileOutputDelimited_5
								.getFieldDelim());
				if (!csvSettings_tFileOutputDelimited_5
						.isUseCRLFRecordDelimiter()
						&& csvSettings_tFileOutputDelimited_5.getRowDelim() != '\r'
						&& csvSettings_tFileOutputDelimited_5.getRowDelim() != '\n') {
					CsvWritertFileOutputDelimited_5.setLineEnd(""
							+ csvSettings_tFileOutputDelimited_5.getRowDelim());
				}
				if (filetFileOutputDelimited_5.length() == 0) {
					headColutFileOutputDelimited_5[0] = "ExternalID__c";
					headColutFileOutputDelimited_5[1] = "Name";
					headColutFileOutputDelimited_5[2] = "BillingStreet";
					headColutFileOutputDelimited_5[3] = "BillingCity";
					headColutFileOutputDelimited_5[4] = "BillingState";
					headColutFileOutputDelimited_5[5] = "BillingPostalCode";
					headColutFileOutputDelimited_5[6] = "BillingCountry";
					headColutFileOutputDelimited_5[7] = "Phone";
					headColutFileOutputDelimited_5[8] = "Fax";
					headColutFileOutputDelimited_5[9] = "AccountNumber";
					headColutFileOutputDelimited_5[10] = "Website";
					headColutFileOutputDelimited_5[11] = "OwnerId";
					headColutFileOutputDelimited_5[12] = "CreatedDate";
					headColutFileOutputDelimited_5[13] = "CreatedById";
					CsvWritertFileOutputDelimited_5
							.writeNext(headColutFileOutputDelimited_5);
					CsvWritertFileOutputDelimited_5.flush();
				}
				CsvWritertFileOutputDelimited_5
						.setEscapeChar(csvSettings_tFileOutputDelimited_5
								.getEscapeChar());
				CsvWritertFileOutputDelimited_5
						.setQuoteChar(csvSettings_tFileOutputDelimited_5
								.getTextEnclosure());
				CsvWritertFileOutputDelimited_5
						.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

				resourceMap.put("CsvWriter_tFileOutputDelimited_5",
						CsvWritertFileOutputDelimited_5);
				resourceMap.put("nb_line_tFileOutputDelimited_5",
						nb_line_tFileOutputDelimited_5);

				/**
				 * [tFileOutputDelimited_5 begin ] stop
				 */

				/**
				 * [tJavaRow_2 begin ] start
				 */

				ok_Hash.put("tJavaRow_2", false);
				start_Hash.put("tJavaRow_2", System.currentTimeMillis());

				currentComponent = "tJavaRow_2";

				int tos_count_tJavaRow_2 = 0;

				int nb_line_tJavaRow_2 = 0;

				/**
				 * [tJavaRow_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_4", false);
				start_Hash.put("tFileInputDelimited_4",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_4";

				int tos_count_tFileInputDelimited_4 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_4 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_4 = 0;
				int footer_tFileInputDelimited_4 = 0;
				int totalLinetFileInputDelimited_4 = 0;
				int limittFileInputDelimited_4 = -1;
				int lastLinetFileInputDelimited_4 = -1;

				char fieldSeparator_tFileInputDelimited_4[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ",").length() > 0) {
					fieldSeparator_tFileInputDelimited_4 = ((String) ",")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_4[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_4 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_4 = /**
				 * Start field
				 * tFileInputDelimited_4:FILENAME
				 */
				context.filePath + "\\Output\\Dest_Accounts_Fail.csv"/**
				 * End field
				 * tFileInputDelimited_4:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_4 = null;

				try {

					String[] rowtFileInputDelimited_4 = null;
					int currentLinetFileInputDelimited_4 = 0;
					int outputLinetFileInputDelimited_4 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_4 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_4 = 0;
							if (footer_value_tFileInputDelimited_4 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_4,
									fieldSeparator_tFileInputDelimited_4[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_4)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_4[0]);
						}

						csvReadertFileInputDelimited_4.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_4[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_4[0] != '\r'))
							csvReadertFileInputDelimited_4.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_4[0]);

						csvReadertFileInputDelimited_4.setQuoteChar('"');

						csvReadertFileInputDelimited_4
								.setEscapeChar(csvReadertFileInputDelimited_4
										.getQuoteChar());

						if (footer_tFileInputDelimited_4 > 0) {
							for (totalLinetFileInputDelimited_4 = 0; totalLinetFileInputDelimited_4 < 1; totalLinetFileInputDelimited_4++) {
								csvReadertFileInputDelimited_4.readNext();
							}
							csvReadertFileInputDelimited_4
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_4.readNext()) {

								rowtFileInputDelimited_4 = csvReadertFileInputDelimited_4
										.getValues();
								if (!(rowtFileInputDelimited_4.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_4[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_4++;

								}

							}
							int lastLineTemptFileInputDelimited_4 = totalLinetFileInputDelimited_4
									- footer_tFileInputDelimited_4 < 0 ? 0
									: totalLinetFileInputDelimited_4
											- footer_tFileInputDelimited_4;
							if (lastLinetFileInputDelimited_4 > 0) {
								lastLinetFileInputDelimited_4 = lastLinetFileInputDelimited_4 < lastLineTemptFileInputDelimited_4 ? lastLinetFileInputDelimited_4
										: lastLineTemptFileInputDelimited_4;
							} else {
								lastLinetFileInputDelimited_4 = lastLineTemptFileInputDelimited_4;
							}

							csvReadertFileInputDelimited_4.close();
							if (filename_tFileInputDelimited_4 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_4,
										fieldSeparator_tFileInputDelimited_4[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_4)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_4[0]);
							}
							csvReadertFileInputDelimited_4
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_4[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_4[0] != '\r'))
								csvReadertFileInputDelimited_4
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_4[0]);

							csvReadertFileInputDelimited_4.setQuoteChar('"');

							csvReadertFileInputDelimited_4
									.setEscapeChar(csvReadertFileInputDelimited_4
											.getQuoteChar());

						}

						if (limittFileInputDelimited_4 != 0) {
							for (currentLinetFileInputDelimited_4 = 0; currentLinetFileInputDelimited_4 < 1; currentLinetFileInputDelimited_4++) {
								csvReadertFileInputDelimited_4.readNext();
							}
						}
						csvReadertFileInputDelimited_4
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_4 != 0
							&& csvReadertFileInputDelimited_4 != null
							&& csvReadertFileInputDelimited_4.readNext()) {
						rowstate_tFileInputDelimited_4.reset();

						rowtFileInputDelimited_4 = csvReadertFileInputDelimited_4
								.getValues();

						if (rowtFileInputDelimited_4.length == 1
								&& ("\015").equals(rowtFileInputDelimited_4[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_4++;

						if (lastLinetFileInputDelimited_4 > -1
								&& currentLinetFileInputDelimited_4 > lastLinetFileInputDelimited_4) {
							break;
						}
						outputLinetFileInputDelimited_4++;
						if (limittFileInputDelimited_4 > 0
								&& outputLinetFileInputDelimited_4 > limittFileInputDelimited_4) {
							break;
						}

						row10 = null;

						boolean whetherReject_tFileInputDelimited_4 = false;
						row10 = new row10Struct();
						try {

							char fieldSeparator_tFileInputDelimited_4_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) ",").length() > 0) {
								fieldSeparator_tFileInputDelimited_4_ListType = ((String) ",")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_4.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_4[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row10.ExternalID__c = null;

								row10.Name = null;

								row10.BillingStreet = null;

								row10.BillingCity = null;

								row10.BillingState = null;

								row10.BillingPostalCode = null;

								row10.BillingCountry = null;

								row10.Phone = null;

								row10.Fax = null;

								row10.AccountNumber = null;

								row10.Website = null;

								row10.OwnerId = null;

								row10.CreatedDate = null;

								row10.CreatedById = null;

								row10.error = null;

							} else {

								for (int i_tFileInputDelimited_4 = 0; i_tFileInputDelimited_4 < rowtFileInputDelimited_4.length; i_tFileInputDelimited_4++) {
									rowtFileInputDelimited_4[i_tFileInputDelimited_4] = rowtFileInputDelimited_4[i_tFileInputDelimited_4]
											.trim();
								}

								int columnIndexWithD_tFileInputDelimited_4 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_4 = 0;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row10.ExternalID__c = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row10.ExternalID__c = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 1;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row10.Name = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row10.Name = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 2;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row10.BillingStreet = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row10.BillingStreet = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 3;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row10.BillingCity = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row10.BillingCity = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 4;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row10.BillingState = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row10.BillingState = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 5;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row10.BillingPostalCode = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row10.BillingPostalCode = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 6;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row10.BillingCountry = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row10.BillingCountry = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 7;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row10.Phone = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row10.Phone = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 8;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row10.Fax = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row10.Fax = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 9;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row10.AccountNumber = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row10.AccountNumber = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 10;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row10.Website = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row10.Website = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 11;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row10.OwnerId = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row10.OwnerId = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 12;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									if (rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4]
											.length() > 0) {
										try {

											row10.CreatedDate = ParserUtils
													.parseTo_Date(
															rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4],
															context.dateTimeString);

										} catch (java.lang.Exception ex_tFileInputDelimited_4) {
											rowstate_tFileInputDelimited_4
													.setException(ex_tFileInputDelimited_4);
										}
									} else {

										row10.CreatedDate = null;

									}

								} else {
									row10.CreatedDate = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 13;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row10.CreatedById = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row10.CreatedById = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 14;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row10.error = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row10.error = null;
								}

							}

							if (rowstate_tFileInputDelimited_4.getException() != null) {
								throw rowstate_tFileInputDelimited_4
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_4 = true;

							System.err.println(e.getMessage());
							row10 = null;

						}

						/**
						 * [tFileInputDelimited_4 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_4 main ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						tos_count_tFileInputDelimited_4++;

						/**
						 * [tFileInputDelimited_4 main ] stop
						 */
						// Start of branch "row10"
						if (row10 != null) {

							/**
							 * [tJavaRow_2 main ] start
							 */

							currentComponent = "tJavaRow_2";

							row11.ExternalID__c = row10.ExternalID__c;
							row11.Name = row10.Name;
							row11.BillingStreet = row10.BillingStreet;
							row11.BillingCity = row10.BillingCity;
							row11.BillingState = row10.BillingState;
							row11.BillingPostalCode = row10.BillingPostalCode;
							row11.BillingCountry = row10.BillingCountry;
							row11.Phone = row10.Phone;
							row11.Fax = row10.Fax;
							row11.AccountNumber = row10.AccountNumber;
							row11.Website = row10.Website;
							row11.OwnerId = row10.OwnerId;
							row11.CreatedDate = row10.CreatedDate;
							row11.CreatedById = row10.CreatedById;
							// If the record already exists, the CreatedById and
							// CreatedDate must be set to null for the upsert to
							// be successful
							if (row10.error != null) {
								if (row10.error
										.contains("INVALID_FIELD_FOR_INSERT_UPDATE:Unable to create/update fields:")) {
									row11.CreatedById = null;
									row11.CreatedDate = null;
								}
							}
							nb_line_tJavaRow_2++;

							tos_count_tJavaRow_2++;

							/**
							 * [tJavaRow_2 main ] stop
							 */

							/**
							 * [tFileOutputDelimited_5 main ] start
							 */

							currentComponent = "tFileOutputDelimited_5";

							String[] rowtFileOutputDelimited_5 = new String[14];
							rowtFileOutputDelimited_5[0] = row11.ExternalID__c == null ? null
									: row11.ExternalID__c;
							rowtFileOutputDelimited_5[1] = row11.Name == null ? null
									: row11.Name;
							rowtFileOutputDelimited_5[2] = row11.BillingStreet == null ? null
									: row11.BillingStreet;
							rowtFileOutputDelimited_5[3] = row11.BillingCity == null ? null
									: row11.BillingCity;
							rowtFileOutputDelimited_5[4] = row11.BillingState == null ? null
									: row11.BillingState;
							rowtFileOutputDelimited_5[5] = row11.BillingPostalCode == null ? null
									: row11.BillingPostalCode;
							rowtFileOutputDelimited_5[6] = row11.BillingCountry == null ? null
									: row11.BillingCountry;
							rowtFileOutputDelimited_5[7] = row11.Phone == null ? null
									: row11.Phone;
							rowtFileOutputDelimited_5[8] = row11.Fax == null ? null
									: row11.Fax;
							rowtFileOutputDelimited_5[9] = row11.AccountNumber == null ? null
									: row11.AccountNumber;
							rowtFileOutputDelimited_5[10] = row11.Website == null ? null
									: row11.Website;
							rowtFileOutputDelimited_5[11] = row11.OwnerId == null ? null
									: row11.OwnerId;
							rowtFileOutputDelimited_5[12] = row11.CreatedDate == null ? null
									: FormatterUtils.format_Date(
											row11.CreatedDate,
											context.dateTimeString);
							rowtFileOutputDelimited_5[13] = row11.CreatedById == null ? null
									: row11.CreatedById;
							nb_line_tFileOutputDelimited_5++;
							resourceMap.put("nb_line_tFileOutputDelimited_5",
									nb_line_tFileOutputDelimited_5);
							CsvWritertFileOutputDelimited_5
									.writeNext(rowtFileOutputDelimited_5);

							tos_count_tFileOutputDelimited_5++;

							/**
							 * [tFileOutputDelimited_5 main ] stop
							 */

						} // End of branch "row10"

						/**
						 * [tFileInputDelimited_4 end ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						nb_line_tFileInputDelimited_4++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_4 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_4 != null) {
							csvReadertFileInputDelimited_4.close();
						}
					}
					if (csvReadertFileInputDelimited_4 != null) {
						globalMap.put("tFileInputDelimited_4_NB_LINE",
								nb_line_tFileInputDelimited_4);
					}

				}

				ok_Hash.put("tFileInputDelimited_4", true);
				end_Hash.put("tFileInputDelimited_4",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_4 end ] stop
				 */

				/**
				 * [tJavaRow_2 end ] start
				 */

				currentComponent = "tJavaRow_2";

				globalMap.put("tJavaRow_2_NB_LINE", nb_line_tJavaRow_2);

				ok_Hash.put("tJavaRow_2", true);
				end_Hash.put("tJavaRow_2", System.currentTimeMillis());

				/**
				 * [tJavaRow_2 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_5 end ] start
				 */

				currentComponent = "tFileOutputDelimited_5";

				if (CsvWritertFileOutputDelimited_5 != null) {
					CsvWritertFileOutputDelimited_5.close();
				}

				globalMap.put("tFileOutputDelimited_5_NB_LINE",
						nb_line_tFileOutputDelimited_5);

				resourceMap.put("finish_tFileOutputDelimited_5", true);

				ok_Hash.put("tFileOutputDelimited_5", true);
				end_Hash.put("tFileOutputDelimited_5",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_5 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_4:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tSalesforceBulkExec_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_4 finally ] start
				 */

				currentComponent = "tFileInputDelimited_4";

				/**
				 * [tFileInputDelimited_4 finally ] stop
				 */

				/**
				 * [tJavaRow_2 finally ] start
				 */

				currentComponent = "tJavaRow_2";

				/**
				 * [tJavaRow_2 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_5 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_5";

				if (resourceMap.get("finish_tFileOutputDelimited_5") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_5 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_5");

					if (CsvWritertFileOutputDelimited_5 != null) {
						CsvWritertFileOutputDelimited_5.close();
					}

				}

				/**
				 * [tFileOutputDelimited_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 1);
	}

	public static class row12Struct implements
			routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_DF2019_Migrate_Accounts = new byte[0];
		static byte[] commonByteArray_DF2019_Migrate_Accounts = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ExternalID__c;

		public String getExternalID__c() {
			return this.ExternalID__c;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String BillingStreet;

		public String getBillingStreet() {
			return this.BillingStreet;
		}

		public String BillingCity;

		public String getBillingCity() {
			return this.BillingCity;
		}

		public String BillingState;

		public String getBillingState() {
			return this.BillingState;
		}

		public String BillingPostalCode;

		public String getBillingPostalCode() {
			return this.BillingPostalCode;
		}

		public String BillingCountry;

		public String getBillingCountry() {
			return this.BillingCountry;
		}

		public String Phone;

		public String getPhone() {
			return this.Phone;
		}

		public String Fax;

		public String getFax() {
			return this.Fax;
		}

		public String AccountNumber;

		public String getAccountNumber() {
			return this.AccountNumber;
		}

		public String Website;

		public String getWebsite() {
			return this.Website;
		}

		public String OwnerId;

		public String getOwnerId() {
			return this.OwnerId;
		}

		public java.util.Date CreatedDate;

		public java.util.Date getCreatedDate() {
			return this.CreatedDate;
		}

		public String CreatedById;

		public String getCreatedById() {
			return this.CreatedById;
		}

		public String salesforce_id;

		public String getSalesforce_id() {
			return this.salesforce_id;
		}

		public String salesforce_created;

		public String getSalesforce_created() {
			return this.salesforce_created;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.ExternalID__c == null) ? 0
								: this.ExternalID__c.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row12Struct other = (row12Struct) obj;

			if (this.ExternalID__c == null) {
				if (other.ExternalID__c != null)
					return false;

			} else if (!this.ExternalID__c.equals(other.ExternalID__c))

				return false;

			return true;
		}

		public void copyDataTo(row12Struct other) {

			other.ExternalID__c = this.ExternalID__c;
			other.Name = this.Name;
			other.BillingStreet = this.BillingStreet;
			other.BillingCity = this.BillingCity;
			other.BillingState = this.BillingState;
			other.BillingPostalCode = this.BillingPostalCode;
			other.BillingCountry = this.BillingCountry;
			other.Phone = this.Phone;
			other.Fax = this.Fax;
			other.AccountNumber = this.AccountNumber;
			other.Website = this.Website;
			other.OwnerId = this.OwnerId;
			other.CreatedDate = this.CreatedDate;
			other.CreatedById = this.CreatedById;
			other.salesforce_id = this.salesforce_id;
			other.salesforce_created = this.salesforce_created;

		}

		public void copyKeysDataTo(row12Struct other) {

			other.ExternalID__c = this.ExternalID__c;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DF2019_Migrate_Accounts.length) {
					if (length < 1024
							&& commonByteArray_DF2019_Migrate_Accounts.length == 0) {
						commonByteArray_DF2019_Migrate_Accounts = new byte[1024];
					} else {
						commonByteArray_DF2019_Migrate_Accounts = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DF2019_Migrate_Accounts, 0,
						length);
				strReturn = new String(commonByteArray_DF2019_Migrate_Accounts,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DF2019_Migrate_Accounts) {

				try {

					int length = 0;

					this.ExternalID__c = readString(dis);

					this.Name = readString(dis);

					this.BillingStreet = readString(dis);

					this.BillingCity = readString(dis);

					this.BillingState = readString(dis);

					this.BillingPostalCode = readString(dis);

					this.BillingCountry = readString(dis);

					this.Phone = readString(dis);

					this.Fax = readString(dis);

					this.AccountNumber = readString(dis);

					this.Website = readString(dis);

					this.OwnerId = readString(dis);

					this.CreatedDate = readDate(dis);

					this.CreatedById = readString(dis);

					this.salesforce_id = readString(dis);

					this.salesforce_created = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ExternalID__c, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.BillingStreet, dos);

				// String

				writeString(this.BillingCity, dos);

				// String

				writeString(this.BillingState, dos);

				// String

				writeString(this.BillingPostalCode, dos);

				// String

				writeString(this.BillingCountry, dos);

				// String

				writeString(this.Phone, dos);

				// String

				writeString(this.Fax, dos);

				// String

				writeString(this.AccountNumber, dos);

				// String

				writeString(this.Website, dos);

				// String

				writeString(this.OwnerId, dos);

				// java.util.Date

				writeDate(this.CreatedDate, dos);

				// String

				writeString(this.CreatedById, dos);

				// String

				writeString(this.salesforce_id, dos);

				// String

				writeString(this.salesforce_created, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ExternalID__c=" + ExternalID__c);
			sb.append(",Name=" + Name);
			sb.append(",BillingStreet=" + BillingStreet);
			sb.append(",BillingCity=" + BillingCity);
			sb.append(",BillingState=" + BillingState);
			sb.append(",BillingPostalCode=" + BillingPostalCode);
			sb.append(",BillingCountry=" + BillingCountry);
			sb.append(",Phone=" + Phone);
			sb.append(",Fax=" + Fax);
			sb.append(",AccountNumber=" + AccountNumber);
			sb.append(",Website=" + Website);
			sb.append(",OwnerId=" + OwnerId);
			sb.append(",CreatedDate=" + String.valueOf(CreatedDate));
			sb.append(",CreatedById=" + CreatedById);
			sb.append(",salesforce_id=" + salesforce_id);
			sb.append(",salesforce_created=" + salesforce_created);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ExternalID__c,
					other.ExternalID__c);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row13Struct implements
			routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_DF2019_Migrate_Accounts = new byte[0];
		static byte[] commonByteArray_DF2019_Migrate_Accounts = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ExternalID__c;

		public String getExternalID__c() {
			return this.ExternalID__c;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String BillingStreet;

		public String getBillingStreet() {
			return this.BillingStreet;
		}

		public String BillingCity;

		public String getBillingCity() {
			return this.BillingCity;
		}

		public String BillingState;

		public String getBillingState() {
			return this.BillingState;
		}

		public String BillingPostalCode;

		public String getBillingPostalCode() {
			return this.BillingPostalCode;
		}

		public String BillingCountry;

		public String getBillingCountry() {
			return this.BillingCountry;
		}

		public String Phone;

		public String getPhone() {
			return this.Phone;
		}

		public String Fax;

		public String getFax() {
			return this.Fax;
		}

		public String AccountNumber;

		public String getAccountNumber() {
			return this.AccountNumber;
		}

		public String Website;

		public String getWebsite() {
			return this.Website;
		}

		public String OwnerId;

		public String getOwnerId() {
			return this.OwnerId;
		}

		public java.util.Date CreatedDate;

		public java.util.Date getCreatedDate() {
			return this.CreatedDate;
		}

		public String CreatedById;

		public String getCreatedById() {
			return this.CreatedById;
		}

		public String error;

		public String getError() {
			return this.error;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.ExternalID__c == null) ? 0
								: this.ExternalID__c.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row13Struct other = (row13Struct) obj;

			if (this.ExternalID__c == null) {
				if (other.ExternalID__c != null)
					return false;

			} else if (!this.ExternalID__c.equals(other.ExternalID__c))

				return false;

			return true;
		}

		public void copyDataTo(row13Struct other) {

			other.ExternalID__c = this.ExternalID__c;
			other.Name = this.Name;
			other.BillingStreet = this.BillingStreet;
			other.BillingCity = this.BillingCity;
			other.BillingState = this.BillingState;
			other.BillingPostalCode = this.BillingPostalCode;
			other.BillingCountry = this.BillingCountry;
			other.Phone = this.Phone;
			other.Fax = this.Fax;
			other.AccountNumber = this.AccountNumber;
			other.Website = this.Website;
			other.OwnerId = this.OwnerId;
			other.CreatedDate = this.CreatedDate;
			other.CreatedById = this.CreatedById;
			other.error = this.error;

		}

		public void copyKeysDataTo(row13Struct other) {

			other.ExternalID__c = this.ExternalID__c;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DF2019_Migrate_Accounts.length) {
					if (length < 1024
							&& commonByteArray_DF2019_Migrate_Accounts.length == 0) {
						commonByteArray_DF2019_Migrate_Accounts = new byte[1024];
					} else {
						commonByteArray_DF2019_Migrate_Accounts = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DF2019_Migrate_Accounts, 0,
						length);
				strReturn = new String(commonByteArray_DF2019_Migrate_Accounts,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DF2019_Migrate_Accounts) {

				try {

					int length = 0;

					this.ExternalID__c = readString(dis);

					this.Name = readString(dis);

					this.BillingStreet = readString(dis);

					this.BillingCity = readString(dis);

					this.BillingState = readString(dis);

					this.BillingPostalCode = readString(dis);

					this.BillingCountry = readString(dis);

					this.Phone = readString(dis);

					this.Fax = readString(dis);

					this.AccountNumber = readString(dis);

					this.Website = readString(dis);

					this.OwnerId = readString(dis);

					this.CreatedDate = readDate(dis);

					this.CreatedById = readString(dis);

					this.error = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ExternalID__c, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.BillingStreet, dos);

				// String

				writeString(this.BillingCity, dos);

				// String

				writeString(this.BillingState, dos);

				// String

				writeString(this.BillingPostalCode, dos);

				// String

				writeString(this.BillingCountry, dos);

				// String

				writeString(this.Phone, dos);

				// String

				writeString(this.Fax, dos);

				// String

				writeString(this.AccountNumber, dos);

				// String

				writeString(this.Website, dos);

				// String

				writeString(this.OwnerId, dos);

				// java.util.Date

				writeDate(this.CreatedDate, dos);

				// String

				writeString(this.CreatedById, dos);

				// String

				writeString(this.error, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ExternalID__c=" + ExternalID__c);
			sb.append(",Name=" + Name);
			sb.append(",BillingStreet=" + BillingStreet);
			sb.append(",BillingCity=" + BillingCity);
			sb.append(",BillingState=" + BillingState);
			sb.append(",BillingPostalCode=" + BillingPostalCode);
			sb.append(",BillingCountry=" + BillingCountry);
			sb.append(",Phone=" + Phone);
			sb.append(",Fax=" + Fax);
			sb.append(",AccountNumber=" + AccountNumber);
			sb.append(",Website=" + Website);
			sb.append(",OwnerId=" + OwnerId);
			sb.append(",CreatedDate=" + String.valueOf(CreatedDate));
			sb.append(",CreatedById=" + CreatedById);
			sb.append(",error=" + error);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ExternalID__c,
					other.ExternalID__c);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tSalesforceBulkExec_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tSalesforceBulkExec_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row12Struct row12 = new row12Struct();
				row13Struct row13 = new row13Struct();

				/**
				 * [tFileOutputDelimited_7 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_7", false);
				start_Hash.put("tFileOutputDelimited_7",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_7";

				int tos_count_tFileOutputDelimited_7 = 0;

				String fileName_tFileOutputDelimited_7 = "";
				fileName_tFileOutputDelimited_7 = (new java.io.File(
						context.filePath
								+ "\\Output\\Dest_Accounts_Success2.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_7 = null;
				String extension_tFileOutputDelimited_7 = null;
				String directory_tFileOutputDelimited_7 = null;
				if ((fileName_tFileOutputDelimited_7.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_7.lastIndexOf(".") < fileName_tFileOutputDelimited_7
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7;
						extension_tFileOutputDelimited_7 = "";
					} else {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
								.substring(0, fileName_tFileOutputDelimited_7
										.lastIndexOf("."));
						extension_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
								.substring(fileName_tFileOutputDelimited_7
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
							.substring(0, fileName_tFileOutputDelimited_7
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_7.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
								.substring(0, fileName_tFileOutputDelimited_7
										.lastIndexOf("."));
						extension_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
								.substring(fileName_tFileOutputDelimited_7
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7;
						extension_tFileOutputDelimited_7 = "";
					}
					directory_tFileOutputDelimited_7 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_7 = true;
				java.io.File filetFileOutputDelimited_7 = new java.io.File(
						fileName_tFileOutputDelimited_7);
				globalMap.put("tFileOutputDelimited_7_FILE_NAME",
						fileName_tFileOutputDelimited_7);
				String[] headColutFileOutputDelimited_7 = new String[16];
				class CSVBasicSet_tFileOutputDelimited_7 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_7[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_7 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_7[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator(",");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_7[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_7 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_7[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_7[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_7 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_7[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_7 = 0;
				int splitEvery_tFileOutputDelimited_7 = 1000;
				int splitedFileNo_tFileOutputDelimited_7 = 0;
				int currentRow_tFileOutputDelimited_7 = 0;

				CSVBasicSet_tFileOutputDelimited_7 csvSettings_tFileOutputDelimited_7 = new CSVBasicSet_tFileOutputDelimited_7();
				csvSettings_tFileOutputDelimited_7.setFieldSeparator(",");
				csvSettings_tFileOutputDelimited_7.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_7.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_7 != null
						&& directory_tFileOutputDelimited_7.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_7 = new java.io.File(
							directory_tFileOutputDelimited_7);
					if (!dir_tFileOutputDelimited_7.exists()) {
						dir_tFileOutputDelimited_7.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_7 = null;

				java.io.File fileToDelete_tFileOutputDelimited_7 = new java.io.File(
						fileName_tFileOutputDelimited_7);
				if (fileToDelete_tFileOutputDelimited_7.exists()) {
					fileToDelete_tFileOutputDelimited_7.delete();
				}
				CsvWritertFileOutputDelimited_7 = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(
								new java.io.OutputStreamWriter(
										new java.io.FileOutputStream(
												fileName_tFileOutputDelimited_7,
												false), "ISO-8859-15")));
				CsvWritertFileOutputDelimited_7
						.setSeparator(csvSettings_tFileOutputDelimited_7
								.getFieldDelim());
				if (!csvSettings_tFileOutputDelimited_7
						.isUseCRLFRecordDelimiter()
						&& csvSettings_tFileOutputDelimited_7.getRowDelim() != '\r'
						&& csvSettings_tFileOutputDelimited_7.getRowDelim() != '\n') {
					CsvWritertFileOutputDelimited_7.setLineEnd(""
							+ csvSettings_tFileOutputDelimited_7.getRowDelim());
				}
				if (filetFileOutputDelimited_7.length() == 0) {
					headColutFileOutputDelimited_7[0] = "ExternalID__c";
					headColutFileOutputDelimited_7[1] = "Name";
					headColutFileOutputDelimited_7[2] = "BillingStreet";
					headColutFileOutputDelimited_7[3] = "BillingCity";
					headColutFileOutputDelimited_7[4] = "BillingState";
					headColutFileOutputDelimited_7[5] = "BillingPostalCode";
					headColutFileOutputDelimited_7[6] = "BillingCountry";
					headColutFileOutputDelimited_7[7] = "Phone";
					headColutFileOutputDelimited_7[8] = "Fax";
					headColutFileOutputDelimited_7[9] = "AccountNumber";
					headColutFileOutputDelimited_7[10] = "Website";
					headColutFileOutputDelimited_7[11] = "OwnerId";
					headColutFileOutputDelimited_7[12] = "CreatedDate";
					headColutFileOutputDelimited_7[13] = "CreatedById";
					headColutFileOutputDelimited_7[14] = "salesforce_id";
					headColutFileOutputDelimited_7[15] = "salesforce_created";
					CsvWritertFileOutputDelimited_7
							.writeNext(headColutFileOutputDelimited_7);
					CsvWritertFileOutputDelimited_7.flush();
				}
				CsvWritertFileOutputDelimited_7
						.setEscapeChar(csvSettings_tFileOutputDelimited_7
								.getEscapeChar());
				CsvWritertFileOutputDelimited_7
						.setQuoteChar(csvSettings_tFileOutputDelimited_7
								.getTextEnclosure());
				CsvWritertFileOutputDelimited_7
						.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

				resourceMap.put("CsvWriter_tFileOutputDelimited_7",
						CsvWritertFileOutputDelimited_7);
				resourceMap.put("nb_line_tFileOutputDelimited_7",
						nb_line_tFileOutputDelimited_7);

				/**
				 * [tFileOutputDelimited_7 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_6 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_6", false);
				start_Hash.put("tFileOutputDelimited_6",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_6";

				int tos_count_tFileOutputDelimited_6 = 0;

				String fileName_tFileOutputDelimited_6 = "";
				fileName_tFileOutputDelimited_6 = (new java.io.File(
						context.filePath + "\\Output\\Dest_Accounts_Fail2.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_6 = null;
				String extension_tFileOutputDelimited_6 = null;
				String directory_tFileOutputDelimited_6 = null;
				if ((fileName_tFileOutputDelimited_6.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_6.lastIndexOf(".") < fileName_tFileOutputDelimited_6
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
						extension_tFileOutputDelimited_6 = "";
					} else {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(0, fileName_tFileOutputDelimited_6
										.lastIndexOf("."));
						extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(fileName_tFileOutputDelimited_6
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
							.substring(0, fileName_tFileOutputDelimited_6
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_6.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(0, fileName_tFileOutputDelimited_6
										.lastIndexOf("."));
						extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(fileName_tFileOutputDelimited_6
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
						extension_tFileOutputDelimited_6 = "";
					}
					directory_tFileOutputDelimited_6 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_6 = true;
				java.io.File filetFileOutputDelimited_6 = new java.io.File(
						fileName_tFileOutputDelimited_6);
				globalMap.put("tFileOutputDelimited_6_FILE_NAME",
						fileName_tFileOutputDelimited_6);
				String[] headColutFileOutputDelimited_6 = new String[15];
				class CSVBasicSet_tFileOutputDelimited_6 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_6[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_6 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_6[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator(",");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_6[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_6 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_6[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_6[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_6 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_6[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_6 = 0;
				int splitEvery_tFileOutputDelimited_6 = 1000;
				int splitedFileNo_tFileOutputDelimited_6 = 0;
				int currentRow_tFileOutputDelimited_6 = 0;

				CSVBasicSet_tFileOutputDelimited_6 csvSettings_tFileOutputDelimited_6 = new CSVBasicSet_tFileOutputDelimited_6();
				csvSettings_tFileOutputDelimited_6.setFieldSeparator(",");
				csvSettings_tFileOutputDelimited_6.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_6.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_6 != null
						&& directory_tFileOutputDelimited_6.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_6 = new java.io.File(
							directory_tFileOutputDelimited_6);
					if (!dir_tFileOutputDelimited_6.exists()) {
						dir_tFileOutputDelimited_6.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_6 = null;

				java.io.File fileToDelete_tFileOutputDelimited_6 = new java.io.File(
						fileName_tFileOutputDelimited_6);
				if (fileToDelete_tFileOutputDelimited_6.exists()) {
					fileToDelete_tFileOutputDelimited_6.delete();
				}
				CsvWritertFileOutputDelimited_6 = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(
								new java.io.OutputStreamWriter(
										new java.io.FileOutputStream(
												fileName_tFileOutputDelimited_6,
												false), "ISO-8859-15")));
				CsvWritertFileOutputDelimited_6
						.setSeparator(csvSettings_tFileOutputDelimited_6
								.getFieldDelim());
				if (!csvSettings_tFileOutputDelimited_6
						.isUseCRLFRecordDelimiter()
						&& csvSettings_tFileOutputDelimited_6.getRowDelim() != '\r'
						&& csvSettings_tFileOutputDelimited_6.getRowDelim() != '\n') {
					CsvWritertFileOutputDelimited_6.setLineEnd(""
							+ csvSettings_tFileOutputDelimited_6.getRowDelim());
				}
				if (filetFileOutputDelimited_6.length() == 0) {
					headColutFileOutputDelimited_6[0] = "ExternalID__c";
					headColutFileOutputDelimited_6[1] = "Name";
					headColutFileOutputDelimited_6[2] = "BillingStreet";
					headColutFileOutputDelimited_6[3] = "BillingCity";
					headColutFileOutputDelimited_6[4] = "BillingState";
					headColutFileOutputDelimited_6[5] = "BillingPostalCode";
					headColutFileOutputDelimited_6[6] = "BillingCountry";
					headColutFileOutputDelimited_6[7] = "Phone";
					headColutFileOutputDelimited_6[8] = "Fax";
					headColutFileOutputDelimited_6[9] = "AccountNumber";
					headColutFileOutputDelimited_6[10] = "Website";
					headColutFileOutputDelimited_6[11] = "OwnerId";
					headColutFileOutputDelimited_6[12] = "CreatedDate";
					headColutFileOutputDelimited_6[13] = "CreatedById";
					headColutFileOutputDelimited_6[14] = "error";
					CsvWritertFileOutputDelimited_6
							.writeNext(headColutFileOutputDelimited_6);
					CsvWritertFileOutputDelimited_6.flush();
				}
				CsvWritertFileOutputDelimited_6
						.setEscapeChar(csvSettings_tFileOutputDelimited_6
								.getEscapeChar());
				CsvWritertFileOutputDelimited_6
						.setQuoteChar(csvSettings_tFileOutputDelimited_6
								.getTextEnclosure());
				CsvWritertFileOutputDelimited_6
						.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

				resourceMap.put("CsvWriter_tFileOutputDelimited_6",
						CsvWritertFileOutputDelimited_6);
				resourceMap.put("nb_line_tFileOutputDelimited_6",
						nb_line_tFileOutputDelimited_6);

				/**
				 * [tFileOutputDelimited_6 begin ] stop
				 */

				/**
				 * [tSalesforceBulkExec_2 begin ] start
				 */

				ok_Hash.put("tSalesforceBulkExec_2", false);
				start_Hash.put("tSalesforceBulkExec_2",
						System.currentTimeMillis());

				currentComponent = "tSalesforceBulkExec_2";

				int tos_count_tSalesforceBulkExec_2 = 0;

				int nb_line_tSalesforceBulkExec_2 = 0;
				int nb_success_tSalesforceBulkExec_2 = 0;
				int nb_reject_tSalesforceBulkExec_2 = 0;
				System.setProperty("org.apache.commons.logging.Log",
						"org.apache.commons.logging.impl.NoOpLog");

				org.talend.salesforceBulk.SforceBulkConnection sforceConn_tSalesforceBulkExec_2 = null;

				if (globalMap.get("conn_tSalesforceConnection_2") == null) {
					throw new RuntimeException(
							"Get null connection from tSalesforceConnection_2");
				}
				sforceConn_tSalesforceBulkExec_2 = (org.talend.salesforceBulk.SforceBulkConnection) globalMap
						.get("conn_tSalesforceConnection_2");

				org.talend.salesforceBulk.SalesforceBulkAPI sforceBulk_tSalesforceBulkExec_2 = new org.talend.salesforceBulk.SalesforceBulkAPI(
						sforceConn_tSalesforceBulkExec_2);
				sforceBulk_tSalesforceBulkExec_2.setConcurrencyMode("Parallel");
				sforceBulk_tSalesforceBulkExec_2.setAwaitTime(10000);

				sforceBulk_tSalesforceBulkExec_2.executeBulk("Account",
						"upsert", "ExternalID__c", "csv", context.filePath
								+ "\\Output\\Dest_Accounts_Retry.csv",
						10 * 1024 * 1024, 10000);

				int j_tSalesforceBulkExec_2 = 0;
				int batchCount_tSalesforceBulkExec_2 = sforceBulk_tSalesforceBulkExec_2
						.getBatchCount();
				for (int i = 0; i < batchCount_tSalesforceBulkExec_2; i++) {
					java.util.List<java.util.Map<String, String>> resultListMessage_tSalesforceBulkExec_2 = sforceBulk_tSalesforceBulkExec_2
							.getBatchLog(i);
					for (java.util.Map<String, String> resultMessage_tSalesforceBulkExec_2 : resultListMessage_tSalesforceBulkExec_2) {
						j_tSalesforceBulkExec_2++;
						nb_line_tSalesforceBulkExec_2++;

						row13 = null;

						row12 = null;

						if ("true".equals(resultMessage_tSalesforceBulkExec_2
								.get("Success"))) {
							nb_success_tSalesforceBulkExec_2++;

							row12 = new row12Struct();

							row12.salesforce_created = resultMessage_tSalesforceBulkExec_2
									.get("Created");
							row12.salesforce_id = resultMessage_tSalesforceBulkExec_2
									.get("Id");

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_2
													.get("ExternalID__c")))) {
								resultMessage_tSalesforceBulkExec_2.put(
										"ExternalID__c", null);
							}

							row12.ExternalID__c = resultMessage_tSalesforceBulkExec_2
									.get("ExternalID__c");

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_2
													.get("Name")))) {
								resultMessage_tSalesforceBulkExec_2.put("Name",
										null);
							}

							row12.Name = resultMessage_tSalesforceBulkExec_2
									.get("Name");

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_2
													.get("BillingStreet")))) {
								resultMessage_tSalesforceBulkExec_2.put(
										"BillingStreet", null);
							}

							row12.BillingStreet = resultMessage_tSalesforceBulkExec_2
									.get("BillingStreet");

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_2
													.get("BillingCity")))) {
								resultMessage_tSalesforceBulkExec_2.put(
										"BillingCity", null);
							}

							row12.BillingCity = resultMessage_tSalesforceBulkExec_2
									.get("BillingCity");

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_2
													.get("BillingState")))) {
								resultMessage_tSalesforceBulkExec_2.put(
										"BillingState", null);
							}

							row12.BillingState = resultMessage_tSalesforceBulkExec_2
									.get("BillingState");

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_2
													.get("BillingPostalCode")))) {
								resultMessage_tSalesforceBulkExec_2.put(
										"BillingPostalCode", null);
							}

							row12.BillingPostalCode = resultMessage_tSalesforceBulkExec_2
									.get("BillingPostalCode");

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_2
													.get("BillingCountry")))) {
								resultMessage_tSalesforceBulkExec_2.put(
										"BillingCountry", null);
							}

							row12.BillingCountry = resultMessage_tSalesforceBulkExec_2
									.get("BillingCountry");

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_2
													.get("Phone")))) {
								resultMessage_tSalesforceBulkExec_2.put(
										"Phone", null);
							}

							row12.Phone = resultMessage_tSalesforceBulkExec_2
									.get("Phone");

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_2
													.get("Fax")))) {
								resultMessage_tSalesforceBulkExec_2.put("Fax",
										null);
							}

							row12.Fax = resultMessage_tSalesforceBulkExec_2
									.get("Fax");

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_2
													.get("AccountNumber")))) {
								resultMessage_tSalesforceBulkExec_2.put(
										"AccountNumber", null);
							}

							row12.AccountNumber = resultMessage_tSalesforceBulkExec_2
									.get("AccountNumber");

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_2
													.get("Website")))) {
								resultMessage_tSalesforceBulkExec_2.put(
										"Website", null);
							}

							row12.Website = resultMessage_tSalesforceBulkExec_2
									.get("Website");

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_2
													.get("OwnerId")))) {
								resultMessage_tSalesforceBulkExec_2.put(
										"OwnerId", null);
							}

							row12.OwnerId = resultMessage_tSalesforceBulkExec_2
									.get("OwnerId");

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_2
													.get("CreatedDate")))) {
								resultMessage_tSalesforceBulkExec_2.put(
										"CreatedDate", null);
							}

							row12.CreatedDate = ParserUtils.parseTo_Date(
									resultMessage_tSalesforceBulkExec_2
											.get("CreatedDate"),
									context.dateTimeString);

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_2
													.get("CreatedById")))) {
								resultMessage_tSalesforceBulkExec_2.put(
										"CreatedById", null);
							}

							row12.CreatedById = resultMessage_tSalesforceBulkExec_2
									.get("CreatedById");

						} else {
							nb_reject_tSalesforceBulkExec_2++;

							row13 = new row13Struct();
							row13.error = resultMessage_tSalesforceBulkExec_2
									.get("Error");

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_2
													.get("ExternalID__c")))) {
								resultMessage_tSalesforceBulkExec_2.put(
										"ExternalID__c", null);
							}

							row13.ExternalID__c = resultMessage_tSalesforceBulkExec_2
									.get("ExternalID__c");

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_2
													.get("Name")))) {
								resultMessage_tSalesforceBulkExec_2.put("Name",
										null);
							}

							row13.Name = resultMessage_tSalesforceBulkExec_2
									.get("Name");

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_2
													.get("BillingStreet")))) {
								resultMessage_tSalesforceBulkExec_2.put(
										"BillingStreet", null);
							}

							row13.BillingStreet = resultMessage_tSalesforceBulkExec_2
									.get("BillingStreet");

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_2
													.get("BillingCity")))) {
								resultMessage_tSalesforceBulkExec_2.put(
										"BillingCity", null);
							}

							row13.BillingCity = resultMessage_tSalesforceBulkExec_2
									.get("BillingCity");

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_2
													.get("BillingState")))) {
								resultMessage_tSalesforceBulkExec_2.put(
										"BillingState", null);
							}

							row13.BillingState = resultMessage_tSalesforceBulkExec_2
									.get("BillingState");

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_2
													.get("BillingPostalCode")))) {
								resultMessage_tSalesforceBulkExec_2.put(
										"BillingPostalCode", null);
							}

							row13.BillingPostalCode = resultMessage_tSalesforceBulkExec_2
									.get("BillingPostalCode");

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_2
													.get("BillingCountry")))) {
								resultMessage_tSalesforceBulkExec_2.put(
										"BillingCountry", null);
							}

							row13.BillingCountry = resultMessage_tSalesforceBulkExec_2
									.get("BillingCountry");

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_2
													.get("Phone")))) {
								resultMessage_tSalesforceBulkExec_2.put(
										"Phone", null);
							}

							row13.Phone = resultMessage_tSalesforceBulkExec_2
									.get("Phone");

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_2
													.get("Fax")))) {
								resultMessage_tSalesforceBulkExec_2.put("Fax",
										null);
							}

							row13.Fax = resultMessage_tSalesforceBulkExec_2
									.get("Fax");

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_2
													.get("AccountNumber")))) {
								resultMessage_tSalesforceBulkExec_2.put(
										"AccountNumber", null);
							}

							row13.AccountNumber = resultMessage_tSalesforceBulkExec_2
									.get("AccountNumber");

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_2
													.get("Website")))) {
								resultMessage_tSalesforceBulkExec_2.put(
										"Website", null);
							}

							row13.Website = resultMessage_tSalesforceBulkExec_2
									.get("Website");

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_2
													.get("OwnerId")))) {
								resultMessage_tSalesforceBulkExec_2.put(
										"OwnerId", null);
							}

							row13.OwnerId = resultMessage_tSalesforceBulkExec_2
									.get("OwnerId");

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_2
													.get("CreatedDate")))) {
								resultMessage_tSalesforceBulkExec_2.put(
										"CreatedDate", null);
							}

							row13.CreatedDate = ParserUtils.parseTo_Date(
									resultMessage_tSalesforceBulkExec_2
											.get("CreatedDate"),
									context.dateTimeString);

							if ("#N/A"
									.equals(String
											.valueOf(resultMessage_tSalesforceBulkExec_2
													.get("CreatedById")))) {
								resultMessage_tSalesforceBulkExec_2.put(
										"CreatedById", null);
							}

							row13.CreatedById = resultMessage_tSalesforceBulkExec_2
									.get("CreatedById");

						}

						/**
						 * [tSalesforceBulkExec_2 begin ] stop
						 */

						/**
						 * [tSalesforceBulkExec_2 main ] start
						 */

						currentComponent = "tSalesforceBulkExec_2";

						tos_count_tSalesforceBulkExec_2++;

						/**
						 * [tSalesforceBulkExec_2 main ] stop
						 */
						// Start of branch "row12"
						if (row12 != null) {

							/**
							 * [tFileOutputDelimited_7 main ] start
							 */

							currentComponent = "tFileOutputDelimited_7";

							String[] rowtFileOutputDelimited_7 = new String[16];
							rowtFileOutputDelimited_7[0] = row12.ExternalID__c == null ? null
									: row12.ExternalID__c;
							rowtFileOutputDelimited_7[1] = row12.Name == null ? null
									: row12.Name;
							rowtFileOutputDelimited_7[2] = row12.BillingStreet == null ? null
									: row12.BillingStreet;
							rowtFileOutputDelimited_7[3] = row12.BillingCity == null ? null
									: row12.BillingCity;
							rowtFileOutputDelimited_7[4] = row12.BillingState == null ? null
									: row12.BillingState;
							rowtFileOutputDelimited_7[5] = row12.BillingPostalCode == null ? null
									: row12.BillingPostalCode;
							rowtFileOutputDelimited_7[6] = row12.BillingCountry == null ? null
									: row12.BillingCountry;
							rowtFileOutputDelimited_7[7] = row12.Phone == null ? null
									: row12.Phone;
							rowtFileOutputDelimited_7[8] = row12.Fax == null ? null
									: row12.Fax;
							rowtFileOutputDelimited_7[9] = row12.AccountNumber == null ? null
									: row12.AccountNumber;
							rowtFileOutputDelimited_7[10] = row12.Website == null ? null
									: row12.Website;
							rowtFileOutputDelimited_7[11] = row12.OwnerId == null ? null
									: row12.OwnerId;
							rowtFileOutputDelimited_7[12] = row12.CreatedDate == null ? null
									: FormatterUtils.format_Date(
											row12.CreatedDate,
											context.dateTimeString);
							rowtFileOutputDelimited_7[13] = row12.CreatedById == null ? null
									: row12.CreatedById;
							rowtFileOutputDelimited_7[14] = row12.salesforce_id == null ? null
									: row12.salesforce_id;
							rowtFileOutputDelimited_7[15] = row12.salesforce_created == null ? null
									: row12.salesforce_created;
							nb_line_tFileOutputDelimited_7++;
							resourceMap.put("nb_line_tFileOutputDelimited_7",
									nb_line_tFileOutputDelimited_7);
							CsvWritertFileOutputDelimited_7
									.writeNext(rowtFileOutputDelimited_7);

							tos_count_tFileOutputDelimited_7++;

							/**
							 * [tFileOutputDelimited_7 main ] stop
							 */

						} // End of branch "row12"

						// Start of branch "row13"
						if (row13 != null) {

							/**
							 * [tFileOutputDelimited_6 main ] start
							 */

							currentComponent = "tFileOutputDelimited_6";

							String[] rowtFileOutputDelimited_6 = new String[15];
							rowtFileOutputDelimited_6[0] = row13.ExternalID__c == null ? null
									: row13.ExternalID__c;
							rowtFileOutputDelimited_6[1] = row13.Name == null ? null
									: row13.Name;
							rowtFileOutputDelimited_6[2] = row13.BillingStreet == null ? null
									: row13.BillingStreet;
							rowtFileOutputDelimited_6[3] = row13.BillingCity == null ? null
									: row13.BillingCity;
							rowtFileOutputDelimited_6[4] = row13.BillingState == null ? null
									: row13.BillingState;
							rowtFileOutputDelimited_6[5] = row13.BillingPostalCode == null ? null
									: row13.BillingPostalCode;
							rowtFileOutputDelimited_6[6] = row13.BillingCountry == null ? null
									: row13.BillingCountry;
							rowtFileOutputDelimited_6[7] = row13.Phone == null ? null
									: row13.Phone;
							rowtFileOutputDelimited_6[8] = row13.Fax == null ? null
									: row13.Fax;
							rowtFileOutputDelimited_6[9] = row13.AccountNumber == null ? null
									: row13.AccountNumber;
							rowtFileOutputDelimited_6[10] = row13.Website == null ? null
									: row13.Website;
							rowtFileOutputDelimited_6[11] = row13.OwnerId == null ? null
									: row13.OwnerId;
							rowtFileOutputDelimited_6[12] = row13.CreatedDate == null ? null
									: FormatterUtils.format_Date(
											row13.CreatedDate,
											context.dateTimeString);
							rowtFileOutputDelimited_6[13] = row13.CreatedById == null ? null
									: row13.CreatedById;
							rowtFileOutputDelimited_6[14] = row13.error == null ? null
									: row13.error;
							nb_line_tFileOutputDelimited_6++;
							resourceMap.put("nb_line_tFileOutputDelimited_6",
									nb_line_tFileOutputDelimited_6);
							CsvWritertFileOutputDelimited_6
									.writeNext(rowtFileOutputDelimited_6);

							tos_count_tFileOutputDelimited_6++;

							/**
							 * [tFileOutputDelimited_6 main ] stop
							 */

						} // End of branch "row13"

						/**
						 * [tSalesforceBulkExec_2 end ] start
						 */

						currentComponent = "tSalesforceBulkExec_2";

					}
				}
				sforceBulk_tSalesforceBulkExec_2.closeFileRead();
				globalMap.put("tSalesforceBulkExec_2_NB_LINE",
						nb_line_tSalesforceBulkExec_2);
				globalMap.put("tSalesforceBulkExec_2_NB_SUCCESS",
						nb_success_tSalesforceBulkExec_2);
				globalMap.put("tSalesforceBulkExec_2_NB_REJECT",
						nb_reject_tSalesforceBulkExec_2);

				ok_Hash.put("tSalesforceBulkExec_2", true);
				end_Hash.put("tSalesforceBulkExec_2",
						System.currentTimeMillis());

				/**
				 * [tSalesforceBulkExec_2 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_7 end ] start
				 */

				currentComponent = "tFileOutputDelimited_7";

				if (CsvWritertFileOutputDelimited_7 != null) {
					CsvWritertFileOutputDelimited_7.close();
				}

				globalMap.put("tFileOutputDelimited_7_NB_LINE",
						nb_line_tFileOutputDelimited_7);

				resourceMap.put("finish_tFileOutputDelimited_7", true);

				ok_Hash.put("tFileOutputDelimited_7", true);
				end_Hash.put("tFileOutputDelimited_7",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_7 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_6 end ] start
				 */

				currentComponent = "tFileOutputDelimited_6";

				if (CsvWritertFileOutputDelimited_6 != null) {
					CsvWritertFileOutputDelimited_6.close();
				}

				globalMap.put("tFileOutputDelimited_6_NB_LINE",
						nb_line_tFileOutputDelimited_6);

				resourceMap.put("finish_tFileOutputDelimited_6", true);

				ok_Hash.put("tFileOutputDelimited_6", true);
				end_Hash.put("tFileOutputDelimited_6",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_6 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tSalesforceBulkExec_2:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_4Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tSalesforceBulkExec_2 finally ] start
				 */

				currentComponent = "tSalesforceBulkExec_2";

				/**
				 * [tSalesforceBulkExec_2 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_7 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_7";

				if (resourceMap.get("finish_tFileOutputDelimited_7") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_7 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_7");

					if (CsvWritertFileOutputDelimited_7 != null) {
						CsvWritertFileOutputDelimited_7.close();
					}

				}

				/**
				 * [tFileOutputDelimited_7 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_6 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_6";

				if (resourceMap.get("finish_tFileOutputDelimited_6") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_6 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_6");

					if (CsvWritertFileOutputDelimited_6 != null) {
						CsvWritertFileOutputDelimited_6.close();
					}

				}

				/**
				 * [tFileOutputDelimited_6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tSalesforceBulkExec_2_SUBPROCESS_STATE", 1);
	}

	public void tJava_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_4 begin ] start
				 */

				ok_Hash.put("tJava_4", false);
				start_Hash.put("tJava_4", System.currentTimeMillis());

				currentComponent = "tJava_4";

				int tos_count_tJava_4 = 0;

				System.out.println(jobName + ": Retried Accounts");
				System.out
						.println(jobName
								+ ": Fail Rows: "
								+ ((Integer) globalMap
										.get("tFileOutputDelimited_6_NB_LINE"))
								+ " Success Rows: "
								+ ((Integer) globalMap
										.get("tFileOutputDelimited_7_NB_LINE"))
								+ " Total: "
								+ (((Integer) globalMap
										.get("tFileOutputDelimited_6_NB_LINE")) + ((Integer) globalMap
										.get("tFileOutputDelimited_7_NB_LINE"))));

				/**
				 * [tJava_4 begin ] stop
				 */

				/**
				 * [tJava_4 main ] start
				 */

				currentComponent = "tJava_4";

				tos_count_tJava_4++;

				/**
				 * [tJava_4 main ] stop
				 */

				/**
				 * [tJava_4 end ] start
				 */

				currentComponent = "tJava_4";

				ok_Hash.put("tJava_4", true);
				end_Hash.put("tJava_4", System.currentTimeMillis());

				/**
				 * [tJava_4 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_4 finally ] start
				 */

				currentComponent = "tJava_4";

				/**
				 * [tJava_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_4_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements
			routines.system.IPersistableComparableLookupRow<row3Struct> {
		final static byte[] commonByteArrayLock_DF2019_Migrate_Accounts = new byte[0];
		static byte[] commonByteArray_DF2019_Migrate_Accounts = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String Id;

		public String getId() {
			return this.Id;
		}

		public String Username;

		public String getUsername() {
			return this.Username;
		}

		public String LastName;

		public String getLastName() {
			return this.LastName;
		}

		public String FirstName;

		public String getFirstName() {
			return this.FirstName;
		}

		public String ExternalID__c;

		public String getExternalID__c() {
			return this.ExternalID__c;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.ExternalID__c == null) ? 0
								: this.ExternalID__c.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.ExternalID__c == null) {
				if (other.ExternalID__c != null)
					return false;

			} else if (!this.ExternalID__c.equals(other.ExternalID__c))

				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.Id = this.Id;
			other.Username = this.Username;
			other.LastName = this.LastName;
			other.FirstName = this.FirstName;
			other.ExternalID__c = this.ExternalID__c;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.ExternalID__c = this.ExternalID__c;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DF2019_Migrate_Accounts.length) {
					if (length < 1024
							&& commonByteArray_DF2019_Migrate_Accounts.length == 0) {
						commonByteArray_DF2019_Migrate_Accounts = new byte[1024];
					} else {
						commonByteArray_DF2019_Migrate_Accounts = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DF2019_Migrate_Accounts, 0,
						length);
				strReturn = new String(commonByteArray_DF2019_Migrate_Accounts,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DF2019_Migrate_Accounts) {

				try {

					int length = 0;

					this.ExternalID__c = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ExternalID__c, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.Id = readString(dis, ois);

				this.Username = readString(dis, ois);

				this.LastName = readString(dis, ois);

				this.FirstName = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.Id, dos, oos);

				writeString(this.Username, dos, oos);

				writeString(this.LastName, dos, oos);

				writeString(this.FirstName, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Id=" + Id);
			sb.append(",Username=" + Username);
			sb.append(",LastName=" + LastName);
			sb.append(",FirstName=" + FirstName);
			sb.append(",ExternalID__c=" + ExternalID__c);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ExternalID__c,
					other.ExternalID__c);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tHash_row3 begin ] start
				 */

				ok_Hash.put("tHash_row3", false);
				start_Hash.put("tHash_row3", System.currentTimeMillis());

				currentComponent = "tHash_row3";

				int tos_count_tHash_row3 = 0;

				java.util.Map<row3Struct, row3Struct> tHash_row3 = new java.util.LinkedHashMap<row3Struct, row3Struct>();
				globalMap.put("tHash_row3", tHash_row3);

				/**
				 * [tHash_row3 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_2 = 0;
				int footer_tFileInputDelimited_2 = 0;
				int totalLinetFileInputDelimited_2 = 0;
				int limittFileInputDelimited_2 = -1;
				int lastLinetFileInputDelimited_2 = -1;

				char fieldSeparator_tFileInputDelimited_2[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ",").length() > 0) {
					fieldSeparator_tFileInputDelimited_2 = ((String) ",")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_2[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_2 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_2 = /**
				 * Start field
				 * tFileInputDelimited_2:FILENAME
				 */
				context.filePath + "\\Output\\Dest_UserExport.csv"/**
				 * End field
				 * tFileInputDelimited_2:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_2 = null;

				try {

					String[] rowtFileInputDelimited_2 = null;
					int currentLinetFileInputDelimited_2 = 0;
					int outputLinetFileInputDelimited_2 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_2 = 0;
							if (footer_value_tFileInputDelimited_2 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_2,
									fieldSeparator_tFileInputDelimited_2[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_2)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_2[0]);
						}

						csvReadertFileInputDelimited_2.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_2[0] != '\r'))
							csvReadertFileInputDelimited_2.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_2[0]);

						csvReadertFileInputDelimited_2.setQuoteChar('"');

						csvReadertFileInputDelimited_2
								.setEscapeChar(csvReadertFileInputDelimited_2
										.getQuoteChar());

						if (footer_tFileInputDelimited_2 > 0) {
							for (totalLinetFileInputDelimited_2 = 0; totalLinetFileInputDelimited_2 < 1; totalLinetFileInputDelimited_2++) {
								csvReadertFileInputDelimited_2.readNext();
							}
							csvReadertFileInputDelimited_2
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_2.readNext()) {

								rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2
										.getValues();
								if (!(rowtFileInputDelimited_2.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_2[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_2++;

								}

							}
							int lastLineTemptFileInputDelimited_2 = totalLinetFileInputDelimited_2
									- footer_tFileInputDelimited_2 < 0 ? 0
									: totalLinetFileInputDelimited_2
											- footer_tFileInputDelimited_2;
							if (lastLinetFileInputDelimited_2 > 0) {
								lastLinetFileInputDelimited_2 = lastLinetFileInputDelimited_2 < lastLineTemptFileInputDelimited_2 ? lastLinetFileInputDelimited_2
										: lastLineTemptFileInputDelimited_2;
							} else {
								lastLinetFileInputDelimited_2 = lastLineTemptFileInputDelimited_2;
							}

							csvReadertFileInputDelimited_2.close();
							if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_2,
										fieldSeparator_tFileInputDelimited_2[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_2)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_2[0]);
							}
							csvReadertFileInputDelimited_2
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_2[0] != '\r'))
								csvReadertFileInputDelimited_2
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_2[0]);

							csvReadertFileInputDelimited_2.setQuoteChar('"');

							csvReadertFileInputDelimited_2
									.setEscapeChar(csvReadertFileInputDelimited_2
											.getQuoteChar());

						}

						if (limittFileInputDelimited_2 != 0) {
							for (currentLinetFileInputDelimited_2 = 0; currentLinetFileInputDelimited_2 < 1; currentLinetFileInputDelimited_2++) {
								csvReadertFileInputDelimited_2.readNext();
							}
						}
						csvReadertFileInputDelimited_2
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_2 != 0
							&& csvReadertFileInputDelimited_2 != null
							&& csvReadertFileInputDelimited_2.readNext()) {
						rowstate_tFileInputDelimited_2.reset();

						rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2
								.getValues();

						if (rowtFileInputDelimited_2.length == 1
								&& ("\015").equals(rowtFileInputDelimited_2[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_2++;

						if (lastLinetFileInputDelimited_2 > -1
								&& currentLinetFileInputDelimited_2 > lastLinetFileInputDelimited_2) {
							break;
						}
						outputLinetFileInputDelimited_2++;
						if (limittFileInputDelimited_2 > 0
								&& outputLinetFileInputDelimited_2 > limittFileInputDelimited_2) {
							break;
						}

						row3 = null;

						row3 = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						row3 = new row3Struct();
						try {

							char fieldSeparator_tFileInputDelimited_2_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) ",").length() > 0) {
								fieldSeparator_tFileInputDelimited_2_ListType = ((String) ",")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_2.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_2[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row3.Id = null;

								row3.Username = null;

								row3.LastName = null;

								row3.FirstName = null;

								row3.ExternalID__c = null;

							} else {

								for (int i_tFileInputDelimited_2 = 0; i_tFileInputDelimited_2 < rowtFileInputDelimited_2.length; i_tFileInputDelimited_2++) {
									rowtFileInputDelimited_2[i_tFileInputDelimited_2] = rowtFileInputDelimited_2[i_tFileInputDelimited_2]
											.trim();
								}

								int columnIndexWithD_tFileInputDelimited_2 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_2 = 0;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.Id = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row3.Id = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 1;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.Username = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row3.Username = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 2;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.LastName = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row3.LastName = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 3;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.FirstName = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row3.FirstName = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 4;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.ExternalID__c = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row3.ExternalID__c = null;
								}

							}

							if (rowstate_tFileInputDelimited_2.getException() != null) {
								throw rowstate_tFileInputDelimited_2
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							row3 = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */
						// Start of branch "row3"
						if (row3 != null) {

							/**
							 * [tHash_row3 main ] start
							 */

							currentComponent = "tHash_row3";

							row3Struct row3_HashRow = new row3Struct();

							row3_HashRow.Id = row3.Id;
							row3_HashRow.Username = row3.Username;
							row3_HashRow.LastName = row3.LastName;
							row3_HashRow.FirstName = row3.FirstName;
							row3_HashRow.ExternalID__c = row3.ExternalID__c;
							tHash_row3.put(row3_HashRow, row3_HashRow);

							tos_count_tHash_row3++;

							/**
							 * [tHash_row3 main ] stop
							 */

						} // End of branch "row3"

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						nb_line_tFileInputDelimited_2++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_2 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_2 != null) {
							csvReadertFileInputDelimited_2.close();
						}
					}
					if (csvReadertFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE",
								nb_line_tFileInputDelimited_2);
					}

				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tHash_row3 end ] start
				 */

				currentComponent = "tHash_row3";

				ok_Hash.put("tHash_row3", true);
				end_Hash.put("tHash_row3", System.currentTimeMillis());

				/**
				 * [tHash_row3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_2 finally ] start
				 */

				currentComponent = "tFileInputDelimited_2";

				/**
				 * [tFileInputDelimited_2 finally ] stop
				 */

				/**
				 * [tHash_row3 finally ] start
				 */

				currentComponent = "tHash_row3";

				/**
				 * [tHash_row3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements
			routines.system.IPersistableComparableLookupRow<row4Struct> {
		final static byte[] commonByteArrayLock_DF2019_Migrate_Accounts = new byte[0];
		static byte[] commonByteArray_DF2019_Migrate_Accounts = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String Id;

		public String getId() {
			return this.Id;
		}

		public String Username;

		public String getUsername() {
			return this.Username;
		}

		public String LastName;

		public String getLastName() {
			return this.LastName;
		}

		public String FirstName;

		public String getFirstName() {
			return this.FirstName;
		}

		public String ExternalID__c;

		public String getExternalID__c() {
			return this.ExternalID__c;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.ExternalID__c == null) ? 0
								: this.ExternalID__c.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.ExternalID__c == null) {
				if (other.ExternalID__c != null)
					return false;

			} else if (!this.ExternalID__c.equals(other.ExternalID__c))

				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.Id = this.Id;
			other.Username = this.Username;
			other.LastName = this.LastName;
			other.FirstName = this.FirstName;
			other.ExternalID__c = this.ExternalID__c;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.ExternalID__c = this.ExternalID__c;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DF2019_Migrate_Accounts.length) {
					if (length < 1024
							&& commonByteArray_DF2019_Migrate_Accounts.length == 0) {
						commonByteArray_DF2019_Migrate_Accounts = new byte[1024];
					} else {
						commonByteArray_DF2019_Migrate_Accounts = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DF2019_Migrate_Accounts, 0,
						length);
				strReturn = new String(commonByteArray_DF2019_Migrate_Accounts,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DF2019_Migrate_Accounts) {

				try {

					int length = 0;

					this.ExternalID__c = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ExternalID__c, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.Id = readString(dis, ois);

				this.Username = readString(dis, ois);

				this.LastName = readString(dis, ois);

				this.FirstName = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.Id, dos, oos);

				writeString(this.Username, dos, oos);

				writeString(this.LastName, dos, oos);

				writeString(this.FirstName, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Id=" + Id);
			sb.append(",Username=" + Username);
			sb.append(",LastName=" + LastName);
			sb.append(",FirstName=" + FirstName);
			sb.append(",ExternalID__c=" + ExternalID__c);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ExternalID__c,
					other.ExternalID__c);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tHash_row4 begin ] start
				 */

				ok_Hash.put("tHash_row4", false);
				start_Hash.put("tHash_row4", System.currentTimeMillis());

				currentComponent = "tHash_row4";

				int tos_count_tHash_row4 = 0;

				java.util.Map<row4Struct, row4Struct> tHash_row4 = new java.util.LinkedHashMap<row4Struct, row4Struct>();
				globalMap.put("tHash_row4", tHash_row4);

				/**
				 * [tHash_row4 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_3 = 0;
				int footer_tFileInputDelimited_3 = 0;
				int totalLinetFileInputDelimited_3 = 0;
				int limittFileInputDelimited_3 = -1;
				int lastLinetFileInputDelimited_3 = -1;

				char fieldSeparator_tFileInputDelimited_3[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ",").length() > 0) {
					fieldSeparator_tFileInputDelimited_3 = ((String) ",")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_3[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_3 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_3 = /**
				 * Start field
				 * tFileInputDelimited_3:FILENAME
				 */
				context.filePath + "\\Output\\Dest_UserExport.csv"/**
				 * End field
				 * tFileInputDelimited_3:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_3 = null;

				try {

					String[] rowtFileInputDelimited_3 = null;
					int currentLinetFileInputDelimited_3 = 0;
					int outputLinetFileInputDelimited_3 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_3 = 0;
							if (footer_value_tFileInputDelimited_3 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_3,
									fieldSeparator_tFileInputDelimited_3[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_3)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_3[0]);
						}

						csvReadertFileInputDelimited_3.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_3[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_3[0] != '\r'))
							csvReadertFileInputDelimited_3.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_3[0]);

						csvReadertFileInputDelimited_3.setQuoteChar('"');

						csvReadertFileInputDelimited_3
								.setEscapeChar(csvReadertFileInputDelimited_3
										.getQuoteChar());

						if (footer_tFileInputDelimited_3 > 0) {
							for (totalLinetFileInputDelimited_3 = 0; totalLinetFileInputDelimited_3 < 1; totalLinetFileInputDelimited_3++) {
								csvReadertFileInputDelimited_3.readNext();
							}
							csvReadertFileInputDelimited_3
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_3.readNext()) {

								rowtFileInputDelimited_3 = csvReadertFileInputDelimited_3
										.getValues();
								if (!(rowtFileInputDelimited_3.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_3[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_3++;

								}

							}
							int lastLineTemptFileInputDelimited_3 = totalLinetFileInputDelimited_3
									- footer_tFileInputDelimited_3 < 0 ? 0
									: totalLinetFileInputDelimited_3
											- footer_tFileInputDelimited_3;
							if (lastLinetFileInputDelimited_3 > 0) {
								lastLinetFileInputDelimited_3 = lastLinetFileInputDelimited_3 < lastLineTemptFileInputDelimited_3 ? lastLinetFileInputDelimited_3
										: lastLineTemptFileInputDelimited_3;
							} else {
								lastLinetFileInputDelimited_3 = lastLineTemptFileInputDelimited_3;
							}

							csvReadertFileInputDelimited_3.close();
							if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_3,
										fieldSeparator_tFileInputDelimited_3[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_3)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_3[0]);
							}
							csvReadertFileInputDelimited_3
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_3[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_3[0] != '\r'))
								csvReadertFileInputDelimited_3
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_3[0]);

							csvReadertFileInputDelimited_3.setQuoteChar('"');

							csvReadertFileInputDelimited_3
									.setEscapeChar(csvReadertFileInputDelimited_3
											.getQuoteChar());

						}

						if (limittFileInputDelimited_3 != 0) {
							for (currentLinetFileInputDelimited_3 = 0; currentLinetFileInputDelimited_3 < 1; currentLinetFileInputDelimited_3++) {
								csvReadertFileInputDelimited_3.readNext();
							}
						}
						csvReadertFileInputDelimited_3
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_3 != 0
							&& csvReadertFileInputDelimited_3 != null
							&& csvReadertFileInputDelimited_3.readNext()) {
						rowstate_tFileInputDelimited_3.reset();

						rowtFileInputDelimited_3 = csvReadertFileInputDelimited_3
								.getValues();

						if (rowtFileInputDelimited_3.length == 1
								&& ("\015").equals(rowtFileInputDelimited_3[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_3++;

						if (lastLinetFileInputDelimited_3 > -1
								&& currentLinetFileInputDelimited_3 > lastLinetFileInputDelimited_3) {
							break;
						}
						outputLinetFileInputDelimited_3++;
						if (limittFileInputDelimited_3 > 0
								&& outputLinetFileInputDelimited_3 > limittFileInputDelimited_3) {
							break;
						}

						row4 = null;

						row4 = null;

						boolean whetherReject_tFileInputDelimited_3 = false;
						row4 = new row4Struct();
						try {

							char fieldSeparator_tFileInputDelimited_3_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) ",").length() > 0) {
								fieldSeparator_tFileInputDelimited_3_ListType = ((String) ",")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_3.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_3[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row4.Id = null;

								row4.Username = null;

								row4.LastName = null;

								row4.FirstName = null;

								row4.ExternalID__c = null;

							} else {

								for (int i_tFileInputDelimited_3 = 0; i_tFileInputDelimited_3 < rowtFileInputDelimited_3.length; i_tFileInputDelimited_3++) {
									rowtFileInputDelimited_3[i_tFileInputDelimited_3] = rowtFileInputDelimited_3[i_tFileInputDelimited_3]
											.trim();
								}

								int columnIndexWithD_tFileInputDelimited_3 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_3 = 0;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.Id = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.Id = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 1;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.Username = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.Username = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 2;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.LastName = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.LastName = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 3;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.FirstName = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.FirstName = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 4;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.ExternalID__c = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.ExternalID__c = null;
								}

							}

							if (rowstate_tFileInputDelimited_3.getException() != null) {
								throw rowstate_tFileInputDelimited_3
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_3 = true;

							System.err.println(e.getMessage());
							row4 = null;

						}

						/**
						 * [tFileInputDelimited_3 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_3 main ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						tos_count_tFileInputDelimited_3++;

						/**
						 * [tFileInputDelimited_3 main ] stop
						 */
						// Start of branch "row4"
						if (row4 != null) {

							/**
							 * [tHash_row4 main ] start
							 */

							currentComponent = "tHash_row4";

							row4Struct row4_HashRow = new row4Struct();

							row4_HashRow.Id = row4.Id;
							row4_HashRow.Username = row4.Username;
							row4_HashRow.LastName = row4.LastName;
							row4_HashRow.FirstName = row4.FirstName;
							row4_HashRow.ExternalID__c = row4.ExternalID__c;
							tHash_row4.put(row4_HashRow, row4_HashRow);

							tos_count_tHash_row4++;

							/**
							 * [tHash_row4 main ] stop
							 */

						} // End of branch "row4"

						/**
						 * [tFileInputDelimited_3 end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						nb_line_tFileInputDelimited_3++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_3 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_3 != null) {
							csvReadertFileInputDelimited_3.close();
						}
					}
					if (csvReadertFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE",
								nb_line_tFileInputDelimited_3);
					}

				}

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */

				/**
				 * [tHash_row4 end ] start
				 */

				currentComponent = "tHash_row4";

				ok_Hash.put("tHash_row4", true);
				end_Hash.put("tHash_row4", System.currentTimeMillis());

				/**
				 * [tHash_row4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_3 finally ] start
				 */

				currentComponent = "tFileInputDelimited_3";

				/**
				 * [tFileInputDelimited_3 finally ] stop
				 */

				/**
				 * [tHash_row4 finally ] start
				 */

				currentComponent = "tHash_row4";

				/**
				 * [tHash_row4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Sandbox";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Migrate_Accounts Migrate_AccountsClass = new Migrate_Accounts();

		int exitCode = Migrate_AccountsClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = Migrate_Accounts.class
					.getClassLoader().getResourceAsStream(
							"df2019/migrate_accounts_1_0/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.dateString = (String) context.getProperty("dateString");
			context.dateTimeString = (String) context
					.getProperty("dateTimeString");
			context.destPass = (String) context.getProperty("destPass");
			context.destURL = (String) context.getProperty("destURL");
			context.destUser = (String) context.getProperty("destUser");
			try {
				context.doDML = routines.system.ParserUtils
						.parseTo_Boolean(context.getProperty("doDML"));
			} catch (NumberFormatException e) {
				context.doDML = null;
			}
			try {
				context.exportRecordsFromDest = routines.system.ParserUtils
						.parseTo_Boolean(context
								.getProperty("exportRecordsFromDest"));
			} catch (NumberFormatException e) {
				context.exportRecordsFromDest = null;
			}
			try {
				context.exportRecordsFromSource = routines.system.ParserUtils
						.parseTo_Boolean(context
								.getProperty("exportRecordsFromSource"));
			} catch (NumberFormatException e) {
				context.exportRecordsFromSource = null;
			}
			context.filePath = (String) context.getProperty("filePath");
			context.sourcePass = (String) context.getProperty("sourcePass");
			context.sourceURL = (String) context.getProperty("sourceURL");
			context.sourceUser = (String) context.getProperty("sourceUser");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("dateString")) {
				context.dateString = (String) parentContextMap
						.get("dateString");
			}
			if (parentContextMap.containsKey("dateTimeString")) {
				context.dateTimeString = (String) parentContextMap
						.get("dateTimeString");
			}
			if (parentContextMap.containsKey("destPass")) {
				context.destPass = (String) parentContextMap.get("destPass");
			}
			if (parentContextMap.containsKey("destURL")) {
				context.destURL = (String) parentContextMap.get("destURL");
			}
			if (parentContextMap.containsKey("destUser")) {
				context.destUser = (String) parentContextMap.get("destUser");
			}
			if (parentContextMap.containsKey("doDML")) {
				context.doDML = (Boolean) parentContextMap.get("doDML");
			}
			if (parentContextMap.containsKey("exportRecordsFromDest")) {
				context.exportRecordsFromDest = (Boolean) parentContextMap
						.get("exportRecordsFromDest");
			}
			if (parentContextMap.containsKey("exportRecordsFromSource")) {
				context.exportRecordsFromSource = (Boolean) parentContextMap
						.get("exportRecordsFromSource");
			}
			if (parentContextMap.containsKey("filePath")) {
				context.filePath = (String) parentContextMap.get("filePath");
			}
			if (parentContextMap.containsKey("sourcePass")) {
				context.sourcePass = (String) parentContextMap
						.get("sourcePass");
			}
			if (parentContextMap.containsKey("sourceURL")) {
				context.sourceURL = (String) parentContextMap.get("sourceURL");
			}
			if (parentContextMap.containsKey("sourceUser")) {
				context.sourceUser = (String) parentContextMap
						.get("sourceUser");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

			e_tPrejob_1.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : Migrate_Accounts");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		connections.put("conn_tSalesforceConnection_1",
				globalMap.get("conn_tSalesforceConnection_1"));
		connections.put("conn_tSalesforceConnection_2",
				globalMap.get("conn_tSalesforceConnection_2"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 397031 characters generated by Talend Open Studio for Data Integration on the
 * November 13, 2019 11:19:40 AM PST
 ************************************************************************************************/
